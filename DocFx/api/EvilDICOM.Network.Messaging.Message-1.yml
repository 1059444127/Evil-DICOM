### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.Messaging.Message`1
  commentId: T:EvilDICOM.Network.Messaging.Message`1
  id: Message`1
  parent: EvilDICOM.Network.Messaging
  children:
  - EvilDICOM.Network.Messaging.Message`1.DynPayload
  - EvilDICOM.Network.Messaging.Message`1.Payload
  - EvilDICOM.Network.Messaging.Message`1.Type
  langs:
  - csharp
  - vb
  name: Message<T>
  nameWithType: Message<T>
  fullName: EvilDICOM.Network.Messaging.Message<T>
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Message
    path: ../EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: 'public class Message<T> : object, IMessage'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Message(Of T)
          Inherits Object
          Implements IMessage
  inheritance:
  - System.Object
  implements:
  - EvilDICOM.Network.Interfaces.IMessage
  nameWithType.vb: Message(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T)
  name.vb: Message(Of T)
- uid: EvilDICOM.Network.Messaging.Message`1.Payload
  commentId: P:EvilDICOM.Network.Messaging.Message`1.Payload
  id: Payload
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: Payload
  nameWithType: Message<T>.Payload
  fullName: EvilDICOM.Network.Messaging.Message<T>.Payload
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Payload
    path: ../EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 7
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public T Payload { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Payload As T
  overload: EvilDICOM.Network.Messaging.Message`1.Payload*
  nameWithType.vb: Message(Of T).Payload
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Payload
- uid: EvilDICOM.Network.Messaging.Message`1.Type
  commentId: P:EvilDICOM.Network.Messaging.Message`1.Type
  id: Type
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Message<T>.Type
  fullName: EvilDICOM.Network.Messaging.Message<T>.Type
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Type
    path: ../EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public MessageType Type { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Network.Enums.MessageType
    content.vb: Public Property Type As MessageType
  overload: EvilDICOM.Network.Messaging.Message`1.Type*
  implements:
  - EvilDICOM.Network.Interfaces.IMessage.Type
  nameWithType.vb: Message(Of T).Type
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Type
- uid: EvilDICOM.Network.Messaging.Message`1.DynPayload
  commentId: P:EvilDICOM.Network.Messaging.Message`1.DynPayload
  id: DynPayload
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: DynPayload
  nameWithType: Message<T>.DynPayload
  fullName: EvilDICOM.Network.Messaging.Message<T>.DynPayload
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DynPayload
    path: ../EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public object DynPayload { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property DynPayload As Object
  overload: EvilDICOM.Network.Messaging.Message`1.DynPayload*
  implements:
  - EvilDICOM.Network.Interfaces.IMessage.DynPayload
  nameWithType.vb: Message(Of T).DynPayload
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).DynPayload
references:
- uid: EvilDICOM.Network.Messaging
  commentId: N:EvilDICOM.Network.Messaging
  isExternal: false
  name: EvilDICOM.Network.Messaging
  nameWithType: EvilDICOM.Network.Messaging
  fullName: EvilDICOM.Network.Messaging
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Network.Interfaces.IMessage
  commentId: T:EvilDICOM.Network.Interfaces.IMessage
  parent: EvilDICOM.Network.Interfaces
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: EvilDICOM.Network.Interfaces.IMessage
- uid: EvilDICOM.Network.Interfaces
  commentId: N:EvilDICOM.Network.Interfaces
  isExternal: false
  name: EvilDICOM.Network.Interfaces
  nameWithType: EvilDICOM.Network.Interfaces
  fullName: EvilDICOM.Network.Interfaces
- uid: EvilDICOM.Network.Messaging.Message`1.Payload*
  commentId: Overload:EvilDICOM.Network.Messaging.Message`1.Payload
  isExternal: false
  name: Payload
  nameWithType: Message<T>.Payload
  fullName: EvilDICOM.Network.Messaging.Message<T>.Payload
  nameWithType.vb: Message(Of T).Payload
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Payload
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EvilDICOM.Network.Messaging.Message`1.Type*
  commentId: Overload:EvilDICOM.Network.Messaging.Message`1.Type
  isExternal: false
  name: Type
  nameWithType: Message<T>.Type
  fullName: EvilDICOM.Network.Messaging.Message<T>.Type
  nameWithType.vb: Message(Of T).Type
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Type
- uid: EvilDICOM.Network.Interfaces.IMessage.Type
  commentId: P:EvilDICOM.Network.Interfaces.IMessage.Type
  parent: EvilDICOM.Network.Interfaces.IMessage
  isExternal: false
  name: Type
  nameWithType: IMessage.Type
  fullName: EvilDICOM.Network.Interfaces.IMessage.Type
- uid: EvilDICOM.Network.Enums.MessageType
  commentId: T:EvilDICOM.Network.Enums.MessageType
  parent: EvilDICOM.Network.Enums
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: EvilDICOM.Network.Enums.MessageType
- uid: EvilDICOM.Network.Enums
  commentId: N:EvilDICOM.Network.Enums
  isExternal: false
  name: EvilDICOM.Network.Enums
  nameWithType: EvilDICOM.Network.Enums
  fullName: EvilDICOM.Network.Enums
- uid: EvilDICOM.Network.Messaging.Message`1.DynPayload*
  commentId: Overload:EvilDICOM.Network.Messaging.Message`1.DynPayload
  isExternal: false
  name: DynPayload
  nameWithType: Message<T>.DynPayload
  fullName: EvilDICOM.Network.Messaging.Message<T>.DynPayload
  nameWithType.vb: Message(Of T).DynPayload
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).DynPayload
- uid: EvilDICOM.Network.Interfaces.IMessage.DynPayload
  commentId: P:EvilDICOM.Network.Interfaces.IMessage.DynPayload
  parent: EvilDICOM.Network.Interfaces.IMessage
  isExternal: false
  name: DynPayload
  nameWithType: IMessage.DynPayload
  fullName: EvilDICOM.Network.Interfaces.IMessage.DynPayload
