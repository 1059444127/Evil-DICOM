items:
- uid: EvilDICOM.Anonymization.AnonymizationQueue
  id: AnonymizationQueue
  parent: EvilDICOM.Anonymization
  children:
  - EvilDICOM.Anonymization.AnonymizationQueue.#ctor
  - EvilDICOM.Anonymization.AnonymizationQueue.Anonymize(EvilDICOM.Core.DICOMObject)
  - EvilDICOM.Anonymization.AnonymizationQueue.BuildQueue(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  - EvilDICOM.Anonymization.AnonymizationQueue.BuildQueueAsync(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  - EvilDICOM.Anonymization.AnonymizationQueue.GetDefault(System.Collections.Generic.IEnumerable{System.String})
  - EvilDICOM.Anonymization.AnonymizationQueue.GetDefaultAsync(System.Collections.Generic.IEnumerable{System.String})
  - EvilDICOM.Anonymization.AnonymizationQueue.ProgressUpdated
  - EvilDICOM.Anonymization.AnonymizationQueue.Queue
  - EvilDICOM.Anonymization.AnonymizationQueue.RaiseProgressUpdated(System.Double)
  langs:
  - csharp
  - vb
  name: AnonymizationQueue
  fullName: EvilDICOM.Anonymization.AnonymizationQueue
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 11
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public class AnonymizationQueue
    content.vb: Public Class AnonymizationQueue
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Anonymization.AnonymizationQueue.#ctor
  id: '#ctor'
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: AnonymizationQueue()
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.AnonymizationQueue()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 13
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public AnonymizationQueue()
    content.vb: Public Sub New
- uid: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueue(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  id: BuildQueue(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: BuildQueue(AnonymizationSettings, IEnumerable<String>)
  name.vb: BuildQueue(AnonymizationSettings, IEnumerable(Of String))
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueue(EvilDICOM.Anonymization.Settings.AnonymizationSettings, System.Collections.Generic.IEnumerable<System.String>)
  fullName.vb: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueue(EvilDICOM.Anonymization.Settings.AnonymizationSettings, System.Collections.Generic.IEnumerable(Of System.String))
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 18
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public static AnonymizationQueue BuildQueue(AnonymizationSettings settings, IEnumerable<string> dcmFiles)
    content.vb: Public Shared Function BuildQueue(settings As AnonymizationSettings, dcmFiles As IEnumerable(Of String)) As AnonymizationQueue
    parameters:
    - id: settings
      type: EvilDICOM.Anonymization.Settings.AnonymizationSettings
    - id: dcmFiles
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: EvilDICOM.Anonymization.AnonymizationQueue
- uid: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueueAsync(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  id: BuildQueueAsync(EvilDICOM.Anonymization.Settings.AnonymizationSettings,System.Collections.Generic.IEnumerable{System.String})
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: BuildQueueAsync(AnonymizationSettings, IEnumerable<String>)
  name.vb: BuildQueueAsync(AnonymizationSettings, IEnumerable(Of String))
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueueAsync(EvilDICOM.Anonymization.Settings.AnonymizationSettings, System.Collections.Generic.IEnumerable<System.String>)
  fullName.vb: EvilDICOM.Anonymization.AnonymizationQueue.BuildQueueAsync(EvilDICOM.Anonymization.Settings.AnonymizationSettings, System.Collections.Generic.IEnumerable(Of System.String))
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 43
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public static Task<AnonymizationQueue> BuildQueueAsync(AnonymizationSettings settings, IEnumerable<string> dcmFiles)
    content.vb: Public Shared Function BuildQueueAsync(settings As AnonymizationSettings, dcmFiles As IEnumerable(Of String)) As Task(Of AnonymizationQueue)
    parameters:
    - id: settings
      type: EvilDICOM.Anonymization.Settings.AnonymizationSettings
    - id: dcmFiles
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: System.Threading.Tasks.Task{EvilDICOM.Anonymization.AnonymizationQueue}
- uid: EvilDICOM.Anonymization.AnonymizationQueue.GetDefault(System.Collections.Generic.IEnumerable{System.String})
  id: GetDefault(System.Collections.Generic.IEnumerable{System.String})
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: GetDefault(IEnumerable<String>)
  name.vb: GetDefault(IEnumerable(Of String))
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.GetDefault(System.Collections.Generic.IEnumerable<System.String>)
  fullName.vb: EvilDICOM.Anonymization.AnonymizationQueue.GetDefault(System.Collections.Generic.IEnumerable(Of System.String))
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 53
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  summary: Builds a standard anonymization que with defaul parameters
  example: []
  syntax:
    content: public static AnonymizationQueue GetDefault(IEnumerable<string> dcmFiles)
    content.vb: Public Shared Function GetDefault(dcmFiles As IEnumerable(Of String)) As AnonymizationQueue
    parameters:
    - id: dcmFiles
      type: System.Collections.Generic.IEnumerable{System.String}
      description: a collection of file paths to anonymize
    return:
      type: EvilDICOM.Anonymization.AnonymizationQueue
      description: the default queue
- uid: EvilDICOM.Anonymization.AnonymizationQueue.GetDefaultAsync(System.Collections.Generic.IEnumerable{System.String})
  id: GetDefaultAsync(System.Collections.Generic.IEnumerable{System.String})
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: GetDefaultAsync(IEnumerable<String>)
  name.vb: GetDefaultAsync(IEnumerable(Of String))
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.GetDefaultAsync(System.Collections.Generic.IEnumerable<System.String>)
  fullName.vb: EvilDICOM.Anonymization.AnonymizationQueue.GetDefaultAsync(System.Collections.Generic.IEnumerable(Of System.String))
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 63
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  summary: Builds a standard anonymization que with defaul parameters
  example: []
  syntax:
    content: public static Task<AnonymizationQueue> GetDefaultAsync(IEnumerable<string> dcmFiles)
    content.vb: Public Shared Function GetDefaultAsync(dcmFiles As IEnumerable(Of String)) As Task(Of AnonymizationQueue)
    parameters:
    - id: dcmFiles
      type: System.Collections.Generic.IEnumerable{System.String}
      description: a collection of file paths to anonymize
    return:
      type: System.Threading.Tasks.Task{EvilDICOM.Anonymization.AnonymizationQueue}
      description: the default queue
- uid: EvilDICOM.Anonymization.AnonymizationQueue.Anonymize(EvilDICOM.Core.DICOMObject)
  id: Anonymize(EvilDICOM.Core.DICOMObject)
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: Anonymize(DICOMObject)
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.Anonymize(EvilDICOM.Core.DICOMObject)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 68
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public void Anonymize(DICOMObject dcm)
    content.vb: Public Sub Anonymize(dcm As DICOMObject)
    parameters:
    - id: dcm
      type: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.Anonymization.AnonymizationQueue.Queue
  id: Queue
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: Queue
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.Queue
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 79
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public List<IAnonymizer> Queue { get; set; }
    content.vb: Public Property Queue As List(Of IAnonymizer)
    parameters: []
    return:
      type: System.Collections.Generic.List{EvilDICOM.Anonymization.IAnonymizer}
- uid: EvilDICOM.Anonymization.AnonymizationQueue.ProgressUpdated
  id: ProgressUpdated
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: ProgressUpdated
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.ProgressUpdated
  type: Event
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 89
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public event AnonymizationQueue.ProgressUpdatedHandler ProgressUpdated
    content.vb: Public Event ProgressUpdated As AnonymizationQueue.ProgressUpdatedHandler
- uid: EvilDICOM.Anonymization.AnonymizationQueue.RaiseProgressUpdated(System.Double)
  id: RaiseProgressUpdated(System.Double)
  parent: EvilDICOM.Anonymization.AnonymizationQueue
  langs:
  - csharp
  - vb
  name: RaiseProgressUpdated(Double)
  fullName: EvilDICOM.Anonymization.AnonymizationQueue.RaiseProgressUpdated(System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Anonymization/AnonymizationQue.cs
    startLine: 91
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization
  syntax:
    content: public void RaiseProgressUpdated(double progress)
    content.vb: Public Sub RaiseProgressUpdated(progress As Double)
    parameters:
    - id: progress
      type: System.Double
references:
- uid: EvilDICOM.Anonymization
  isExternal: false
  name: EvilDICOM.Anonymization
  fullName: EvilDICOM.Anonymization
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: EvilDICOM.Anonymization.Settings.AnonymizationSettings
  parent: EvilDICOM.Anonymization.Settings
  isExternal: false
  name: AnonymizationSettings
  fullName: EvilDICOM.Anonymization.Settings.AnonymizationSettings
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: EvilDICOM.Anonymization.AnonymizationQueue
  parent: EvilDICOM.Anonymization
  isExternal: false
  name: AnonymizationQueue
  fullName: EvilDICOM.Anonymization.AnonymizationQueue
- uid: EvilDICOM.Anonymization.Settings
  isExternal: false
  name: EvilDICOM.Anonymization.Settings
  fullName: EvilDICOM.Anonymization.Settings
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task{EvilDICOM.Anonymization.AnonymizationQueue}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AnonymizationQueue>
  fullName: System.Threading.Tasks.Task<EvilDICOM.Anonymization.AnonymizationQueue>
  fullname.vb: System.Threading.Tasks.Task(Of EvilDICOM.Anonymization.AnonymizationQueue)
  name.vb: Task(Of AnonymizationQueue)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: EvilDICOM.Anonymization.AnonymizationQueue
    name: AnonymizationQueue
    fullName: EvilDICOM.Anonymization.AnonymizationQueue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Anonymization.AnonymizationQueue
    name: AnonymizationQueue
    fullName: EvilDICOM.Anonymization.AnonymizationQueue
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EvilDICOM.Core.DICOMObject
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMObject
  fullName: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: System.Collections.Generic.List{EvilDICOM.Anonymization.IAnonymizer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IAnonymizer>
  fullName: System.Collections.Generic.List<EvilDICOM.Anonymization.IAnonymizer>
  fullname.vb: System.Collections.Generic.List(Of EvilDICOM.Anonymization.IAnonymizer)
  name.vb: List(Of IAnonymizer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - uid: EvilDICOM.Anonymization.IAnonymizer
    name: IAnonymizer
    fullName: EvilDICOM.Anonymization.IAnonymizer
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Anonymization.IAnonymizer
    name: IAnonymizer
    fullName: EvilDICOM.Anonymization.IAnonymizer
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: true
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  fullName: System.Double
