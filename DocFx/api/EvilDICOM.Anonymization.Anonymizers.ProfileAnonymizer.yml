### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer
  commentId: T:EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer
  id: ProfileAnonymizer
  parent: EvilDICOM.Anonymization.Anonymizers
  children:
  - EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  - EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile
  langs:
  - csharp
  - vb
  name: ProfileAnonymizer
  nameWithType: ProfileAnonymizer
  fullName: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ProfileAnonymizer
    path: ../EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
    startLine: 15
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization.Anonymizers
  summary: "\nReplaces standard indentification profile with empty data\n"
  example: []
  syntax:
    content: 'public class ProfileAnonymizer : object, IAnonymizer'
    content.vb: >-
      Public Class ProfileAnonymizer
          Inherits Object
          Implements IAnonymizer
  inheritance:
  - System.Object
  implements:
  - EvilDICOM.Anonymization.IAnonymizer
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  commentId: M:EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  id: Anonymize(EvilDICOM.Core.DICOMObject)
  parent: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer
  langs:
  - csharp
  - vb
  name: Anonymize(DICOMObject)
  nameWithType: ProfileAnonymizer.Anonymize(DICOMObject)
  fullName: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Anonymize
    path: ../EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
    startLine: 17
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization.Anonymizers
  syntax:
    content: public void Anonymize(DICOMObject d)
    parameters:
    - id: d
      type: EvilDICOM.Core.DICOMObject
    content.vb: Public Sub Anonymize(d As DICOMObject)
  overload: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize*
  implements:
  - EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile
  commentId: M:EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile
  id: GenerateProfile
  parent: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer
  langs:
  - csharp
  - vb
  name: GenerateProfile()
  nameWithType: ProfileAnonymizer.GenerateProfile()
  fullName: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GenerateProfile
    path: ../EvilDICOM/EvilDICOM/Anonymization/Anonymizers/ProfileAnonymizer.cs
    startLine: 31
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Anonymization.Anonymizers
  summary: "\nReturns a collection of identifiable elements\n"
  example: []
  syntax:
    content: public List<IDICOMElement> GenerateProfile()
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
      description: ''
    content.vb: Public Function GenerateProfile As List(Of IDICOMElement)
  overload: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EvilDICOM.Anonymization.Anonymizers
  commentId: N:EvilDICOM.Anonymization.Anonymizers
  isExternal: false
  name: EvilDICOM.Anonymization.Anonymizers
  nameWithType: EvilDICOM.Anonymization.Anonymizers
  fullName: EvilDICOM.Anonymization.Anonymizers
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Anonymization.IAnonymizer
  commentId: T:EvilDICOM.Anonymization.IAnonymizer
  parent: EvilDICOM.Anonymization
  isExternal: false
  name: IAnonymizer
  nameWithType: IAnonymizer
  fullName: EvilDICOM.Anonymization.IAnonymizer
- uid: EvilDICOM.Anonymization
  commentId: N:EvilDICOM.Anonymization
  isExternal: false
  name: EvilDICOM.Anonymization
  nameWithType: EvilDICOM.Anonymization
  fullName: EvilDICOM.Anonymization
- uid: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize*
  commentId: Overload:EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize
  isExternal: false
  name: Anonymize
  nameWithType: ProfileAnonymizer.Anonymize
  fullName: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.Anonymize
- uid: EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  commentId: M:EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  parent: EvilDICOM.Anonymization.IAnonymizer
  isExternal: false
  name: Anonymize(DICOMObject)
  nameWithType: IAnonymizer.Anonymize(DICOMObject)
  fullName: EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
  spec.csharp:
  - uid: EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
    name: Anonymize
    nameWithType: IAnonymizer.Anonymize
    fullName: EvilDICOM.Anonymization.IAnonymizer.Anonymize
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.DICOMObject
    name: DICOMObject
    nameWithType: DICOMObject
    fullName: EvilDICOM.Core.DICOMObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Anonymization.IAnonymizer.Anonymize(EvilDICOM.Core.DICOMObject)
    name: Anonymize
    nameWithType: IAnonymizer.Anonymize
    fullName: EvilDICOM.Anonymization.IAnonymizer.Anonymize
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.DICOMObject
    name: DICOMObject
    nameWithType: DICOMObject
    fullName: EvilDICOM.Core.DICOMObject
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.DICOMObject
  commentId: T:EvilDICOM.Core.DICOMObject
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMObject
  nameWithType: DICOMObject
  fullName: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.Core
  commentId: N:EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  nameWithType: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile*
  commentId: Overload:EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile
  isExternal: false
  name: GenerateProfile
  nameWithType: ProfileAnonymizer.GenerateProfile
  fullName: EvilDICOM.Anonymization.Anonymizers.ProfileAnonymizer.GenerateProfile
- uid: List{EvilDICOM.Core.Interfaces.IDICOMElement}
  commentId: '!:List{EvilDICOM.Core.Interfaces.IDICOMElement}'
  definition: List`1
  name: List<IDICOMElement>
  nameWithType: List<IDICOMElement>
  fullName: List<EvilDICOM.Core.Interfaces.IDICOMElement>
  nameWithType.vb: List(Of IDICOMElement)
  fullName.vb: List(Of EvilDICOM.Core.Interfaces.IDICOMElement)
  name.vb: List(Of IDICOMElement)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
