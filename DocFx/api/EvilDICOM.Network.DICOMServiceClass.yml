### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.DICOMServiceClass
  commentId: T:EvilDICOM.Network.DICOMServiceClass
  id: DICOMServiceClass
  parent: EvilDICOM.Network
  children:
  - EvilDICOM.Network.DICOMServiceClass.#ctor(EvilDICOM.Network.Entity)
  - EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
  - EvilDICOM.Network.DICOMServiceClass.AssociationService
  - EvilDICOM.Network.DICOMServiceClass.DIMSEService
  - EvilDICOM.Network.DICOMServiceClass.Logger
  - EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
  - EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
  langs:
  - csharp
  - vb
  name: DICOMServiceClass
  nameWithType: DICOMServiceClass
  fullName: EvilDICOM.Network.DICOMServiceClass
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DICOMServiceClass
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: 'public abstract class DICOMServiceClass : object'
    content.vb: >-
      Public MustInherit Class DICOMServiceClass
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EvilDICOM.Network.DICOMSCP
  - EvilDICOM.Network.DICOMSCU
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EvilDICOM.Network.DICOMServiceClass.#ctor(EvilDICOM.Network.Entity)
  commentId: M:EvilDICOM.Network.DICOMServiceClass.#ctor(EvilDICOM.Network.Entity)
  id: '#ctor(EvilDICOM.Network.Entity)'
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: DICOMServiceClass(Entity)
  nameWithType: DICOMServiceClass.DICOMServiceClass(Entity)
  fullName: EvilDICOM.Network.DICOMServiceClass.DICOMServiceClass(EvilDICOM.Network.Entity)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public DICOMServiceClass(Entity ae)
    parameters:
    - id: ae
      type: EvilDICOM.Network.Entity
    content.vb: Public Sub New(ae As Entity)
  overload: EvilDICOM.Network.DICOMServiceClass.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.AssociationService
  commentId: P:EvilDICOM.Network.DICOMServiceClass.AssociationService
  id: AssociationService
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: AssociationService
  nameWithType: DICOMServiceClass.AssociationService
  fullName: EvilDICOM.Network.DICOMServiceClass.AssociationService
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: AssociationService
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public AssociationService AssociationService { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Network.Services.AssociationService
    content.vb: Public Property AssociationService As AssociationService
  overload: EvilDICOM.Network.DICOMServiceClass.AssociationService*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.DIMSEService
  commentId: P:EvilDICOM.Network.DICOMServiceClass.DIMSEService
  id: DIMSEService
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: DIMSEService
  nameWithType: DICOMServiceClass.DIMSEService
  fullName: EvilDICOM.Network.DICOMServiceClass.DIMSEService
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DIMSEService
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 25
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public DIMSEService DIMSEService { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Network.Services.DIMSEService
    content.vb: Public Property DIMSEService As DIMSEService
  overload: EvilDICOM.Network.DICOMServiceClass.DIMSEService*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
  commentId: P:EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
  id: ApplicationEntity
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: ApplicationEntity
  nameWithType: DICOMServiceClass.ApplicationEntity
  fullName: EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ApplicationEntity
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 26
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public Entity ApplicationEntity { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Network.Entity
    content.vb: Public Property ApplicationEntity As Entity
  overload: EvilDICOM.Network.DICOMServiceClass.ApplicationEntity*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
  commentId: P:EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
  id: SupportedTransferSyntaxes
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: SupportedTransferSyntaxes
  nameWithType: DICOMServiceClass.SupportedTransferSyntaxes
  fullName: EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SupportedTransferSyntaxes
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public List<string> SupportedTransferSyntaxes { get; set; }
    parameters: []
    return:
      type: List{System.String}
    content.vb: Public Property SupportedTransferSyntaxes As List(Of String)
  overload: EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
  commentId: P:EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
  id: SupportedAbstractSyntaxes
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: SupportedAbstractSyntaxes
  nameWithType: DICOMServiceClass.SupportedAbstractSyntaxes
  fullName: EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SupportedAbstractSyntaxes
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 28
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public List<string> SupportedAbstractSyntaxes { get; set; }
    parameters: []
    return:
      type: List{System.String}
    content.vb: Public Property SupportedAbstractSyntaxes As List(Of String)
  overload: EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.DICOMServiceClass.Logger
  commentId: P:EvilDICOM.Network.DICOMServiceClass.Logger
  id: Logger
  parent: EvilDICOM.Network.DICOMServiceClass
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: DICOMServiceClass.Logger
  fullName: EvilDICOM.Network.DICOMServiceClass.Logger
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Logger
    path: ../EvilDICOM/EvilDICOM/Network/DICOMServiceClass.cs
    startLine: 29
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network
  syntax:
    content: public EventLogger Logger { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Core.Logging.EventLogger
    content.vb: Public Property Logger As EventLogger
  overload: EvilDICOM.Network.DICOMServiceClass.Logger*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: EvilDICOM.Network
  commentId: N:EvilDICOM.Network
  isExternal: false
  name: EvilDICOM.Network
  nameWithType: EvilDICOM.Network
  fullName: EvilDICOM.Network
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Network.DICOMServiceClass.#ctor*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.#ctor
  isExternal: false
  name: DICOMServiceClass
  nameWithType: DICOMServiceClass.DICOMServiceClass
  fullName: EvilDICOM.Network.DICOMServiceClass.DICOMServiceClass
- uid: EvilDICOM.Network.Entity
  commentId: T:EvilDICOM.Network.Entity
  parent: EvilDICOM.Network
  isExternal: false
  name: Entity
  nameWithType: Entity
  fullName: EvilDICOM.Network.Entity
- uid: EvilDICOM.Network.DICOMServiceClass.AssociationService*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.AssociationService
  isExternal: false
  name: AssociationService
  nameWithType: DICOMServiceClass.AssociationService
  fullName: EvilDICOM.Network.DICOMServiceClass.AssociationService
- uid: EvilDICOM.Network.Services.AssociationService
  commentId: T:EvilDICOM.Network.Services.AssociationService
  parent: EvilDICOM.Network.Services
  isExternal: false
  name: AssociationService
  nameWithType: AssociationService
  fullName: EvilDICOM.Network.Services.AssociationService
- uid: EvilDICOM.Network.Services
  commentId: N:EvilDICOM.Network.Services
  isExternal: false
  name: EvilDICOM.Network.Services
  nameWithType: EvilDICOM.Network.Services
  fullName: EvilDICOM.Network.Services
- uid: EvilDICOM.Network.DICOMServiceClass.DIMSEService*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.DIMSEService
  isExternal: false
  name: DIMSEService
  nameWithType: DICOMServiceClass.DIMSEService
  fullName: EvilDICOM.Network.DICOMServiceClass.DIMSEService
- uid: EvilDICOM.Network.Services.DIMSEService
  commentId: T:EvilDICOM.Network.Services.DIMSEService
  parent: EvilDICOM.Network.Services
  isExternal: false
  name: DIMSEService
  nameWithType: DIMSEService
  fullName: EvilDICOM.Network.Services.DIMSEService
- uid: EvilDICOM.Network.DICOMServiceClass.ApplicationEntity*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
  isExternal: false
  name: ApplicationEntity
  nameWithType: DICOMServiceClass.ApplicationEntity
  fullName: EvilDICOM.Network.DICOMServiceClass.ApplicationEntity
- uid: EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
  isExternal: false
  name: SupportedTransferSyntaxes
  nameWithType: DICOMServiceClass.SupportedTransferSyntaxes
  fullName: EvilDICOM.Network.DICOMServiceClass.SupportedTransferSyntaxes
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
  isExternal: false
  name: SupportedAbstractSyntaxes
  nameWithType: DICOMServiceClass.SupportedAbstractSyntaxes
  fullName: EvilDICOM.Network.DICOMServiceClass.SupportedAbstractSyntaxes
- uid: EvilDICOM.Network.DICOMServiceClass.Logger*
  commentId: Overload:EvilDICOM.Network.DICOMServiceClass.Logger
  isExternal: false
  name: Logger
  nameWithType: DICOMServiceClass.Logger
  fullName: EvilDICOM.Network.DICOMServiceClass.Logger
- uid: EvilDICOM.Core.Logging.EventLogger
  commentId: T:EvilDICOM.Core.Logging.EventLogger
  parent: EvilDICOM.Core.Logging
  isExternal: false
  name: EventLogger
  nameWithType: EventLogger
  fullName: EvilDICOM.Core.Logging.EventLogger
- uid: EvilDICOM.Core.Logging
  commentId: N:EvilDICOM.Core.Logging
  isExternal: false
  name: EvilDICOM.Core.Logging
  nameWithType: EvilDICOM.Core.Logging
  fullName: EvilDICOM.Core.Logging
