items:
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader
  id: NetworkBinaryReader
  parent: EvilDICOM.Network.Readers
  children:
  - EvilDICOM.Network.Readers.NetworkBinaryReader.#ctor(System.IO.BufferedStream)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.#ctor(System.IO.BufferedStream,EvilDICOM.Core.Interfaces.IByteLogger)
  - EvilDICOM.Network.Readers.NetworkBinaryReader._binaryReader
  - EvilDICOM.Network.Readers.NetworkBinaryReader.DumpLog``1
  - EvilDICOM.Network.Readers.NetworkBinaryReader.GetSubStream(System.Int32)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.ReadBytes(System.Int32)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.ReadChars(System.Int32)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.ReadString(System.Int32)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.SetLogger(EvilDICOM.Core.Interfaces.IByteLogger)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.Skip(System.Int32)
  - EvilDICOM.Network.Readers.NetworkBinaryReader.Take(System.Int32)
  langs:
  - csharp
  - vb
  name: NetworkBinaryReader
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 16
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  syntax:
    content: public class NetworkBinaryReader
    content.vb: Public Class NetworkBinaryReader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader._binaryReader
  id: _binaryReader
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: _binaryReader
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader._binaryReader
  type: Field
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  syntax:
    content: protected BinaryReader _binaryReader
    content.vb: Protected _binaryReader As BinaryReader
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.#ctor(System.IO.BufferedStream)
  id: '#ctor(System.IO.BufferedStream)'
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: NetworkBinaryReader(BufferedStream)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.NetworkBinaryReader(System.IO.BufferedStream)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Constructs a DICOM binary reader from a network stream
  example: []
  syntax:
    content: public NetworkBinaryReader(BufferedStream stream)
    content.vb: Public Sub New(stream As BufferedStream)
    parameters:
    - id: stream
      type: System.IO.BufferedStream
      description: 
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.#ctor(System.IO.BufferedStream,EvilDICOM.Core.Interfaces.IByteLogger)
  id: '#ctor(System.IO.BufferedStream,EvilDICOM.Core.Interfaces.IByteLogger)'
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: NetworkBinaryReader(BufferedStream, IByteLogger)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.NetworkBinaryReader(System.IO.BufferedStream, EvilDICOM.Core.Interfaces.IByteLogger)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 37
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Constructs a DICOM binary reader from a network stream
  example: []
  syntax:
    content: public NetworkBinaryReader(BufferedStream stream, IByteLogger logger)
    content.vb: Public Sub New(stream As BufferedStream, logger As IByteLogger)
    parameters:
    - id: stream
      type: System.IO.BufferedStream
      description: 
    - id: logger
      type: EvilDICOM.Core.Interfaces.IByteLogger
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.SetLogger(EvilDICOM.Core.Interfaces.IByteLogger)
  id: SetLogger(EvilDICOM.Core.Interfaces.IByteLogger)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: SetLogger(IByteLogger)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.SetLogger(EvilDICOM.Core.Interfaces.IByteLogger)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 44
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  syntax:
    content: public void SetLogger(IByteLogger logger)
    content.vb: Public Sub SetLogger(logger As IByteLogger)
    parameters:
    - id: logger
      type: EvilDICOM.Core.Interfaces.IByteLogger
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadBytes(System.Int32)
  id: ReadBytes(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: ReadBytes(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadBytes(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 54
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Reads the specified number of bytes
  example: []
  syntax:
    content: public byte[] ReadBytes(int count)
    content.vb: Public Function ReadBytes(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
      description: the number of bytes to be read
    return:
      type: System.Byte[]
      description: the read bytes
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.Take(System.Int32)
  id: Take(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: Take(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.Take(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 74
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Reads the specified number of bytes (shorthand for ReadBytes method).
  example: []
  syntax:
    content: public byte[] Take(int count)
    content.vb: Public Function Take(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
      description: the number of bytes to be read
    return:
      type: System.Byte[]
      description: the read bytes
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.GetSubStream(System.Int32)
  id: GetSubStream(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: GetSubStream(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.GetSubStream(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 84
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Creates a new stream that is trimmed to the specification length.
  example: []
  syntax:
    content: public DICOMBinaryReader GetSubStream(int substreamLength)
    content.vb: Public Function GetSubStream(substreamLength As Integer) As DICOMBinaryReader
    parameters:
    - id: substreamLength
      type: System.Int32
      description: the number of bytes to include in the new stream (starting from the current position)
    return:
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadChars(System.Int32)
  id: ReadChars(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: ReadChars(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadChars(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 95
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Reads the specified number of chars
  example: []
  syntax:
    content: public char[] ReadChars(int count)
    content.vb: Public Function ReadChars(count As Integer) As Char()
    parameters:
    - id: count
      type: System.Int32
      description: the number of chars to be read
    return:
      type: System.Char[]
      description: the read chars
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadString(System.Int32)
  id: ReadString(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: ReadString(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.ReadString(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 106
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  summary: Reads the specified number of chars and converts to a string
  example: []
  syntax:
    content: public string ReadString(int length)
    content.vb: Public Function ReadString(length As Integer) As String
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.String
      description: the read chars
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.Skip(System.Int32)
  id: Skip(System.Int32)
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: Skip(Int32)
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.Skip(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 112
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  syntax:
    content: public NetworkBinaryReader Skip(int count)
    content.vb: Public Function Skip(count As Integer) As NetworkBinaryReader
    parameters:
    - id: count
      type: System.Int32
    return:
      type: EvilDICOM.Network.Readers.NetworkBinaryReader
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader.DumpLog``1
  id: DumpLog``1
  parent: EvilDICOM.Network.Readers.NetworkBinaryReader
  langs:
  - csharp
  - vb
  name: DumpLog<T>()
  name.vb: DumpLog(Of T)()
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader.DumpLog<T>()
  fullName.vb: EvilDICOM.Network.Readers.NetworkBinaryReader.DumpLog(Of T)()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Readers/NetworkBinaryReader.cs
    startLine: 118
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Readers
  syntax:
    content: public void DumpLog<T>()
    content.vb: Public Sub DumpLog(Of T)
    typeParameters:
    - id: T
references:
- uid: EvilDICOM.Network.Readers
  isExternal: false
  name: EvilDICOM.Network.Readers
  fullName: EvilDICOM.Network.Readers
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.BufferedStream
  parent: System.IO
  isExternal: true
  name: BufferedStream
  fullName: System.IO.BufferedStream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: EvilDICOM.Core.Interfaces.IByteLogger
  parent: EvilDICOM.Core.Interfaces
  isExternal: false
  name: IByteLogger
  fullName: EvilDICOM.Core.Interfaces.IByteLogger
- uid: EvilDICOM.Core.Interfaces
  isExternal: false
  name: EvilDICOM.Core.Interfaces
  fullName: EvilDICOM.Core.Interfaces
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  parent: EvilDICOM.Core.IO.Reading
  isExternal: false
  name: DICOMBinaryReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: EvilDICOM.Core.IO.Reading
  isExternal: false
  name: EvilDICOM.Core.IO.Reading
  fullName: EvilDICOM.Core.IO.Reading
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: EvilDICOM.Network.Readers.NetworkBinaryReader
  parent: EvilDICOM.Network.Readers
  isExternal: false
  name: NetworkBinaryReader
  fullName: EvilDICOM.Network.Readers.NetworkBinaryReader
