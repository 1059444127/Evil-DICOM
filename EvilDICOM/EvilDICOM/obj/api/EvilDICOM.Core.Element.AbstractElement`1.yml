items:
- uid: EvilDICOM.Core.Element.AbstractElement`1
  id: AbstractElement`1
  parent: EvilDICOM.Core.Element
  children:
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0)
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0[])
  - EvilDICOM.Core.Element.AbstractElement`1.Data
  - EvilDICOM.Core.Element.AbstractElement`1.Data_
  - EvilDICOM.Core.Element.AbstractElement`1.DatType
  - EvilDICOM.Core.Element.AbstractElement`1.DData
  - EvilDICOM.Core.Element.AbstractElement`1.DData_
  - EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  - EvilDICOM.Core.Element.AbstractElement`1.SetData(`0)
  - EvilDICOM.Core.Element.AbstractElement`1.SetData(`0[])
  - EvilDICOM.Core.Element.AbstractElement`1.Tag
  - EvilDICOM.Core.Element.AbstractElement`1.ToString
  - EvilDICOM.Core.Element.AbstractElement`1.VR
  langs:
  - csharp
  - vb
  name: AbstractElement<T>
  name.vb: AbstractElement(Of T)
  fullName: EvilDICOM.Core.Element.AbstractElement<T>
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T)
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: >-
    The overarching abstract class from which all DICOM element classes derive. Contains properties that are common to

    elements.
  example: []
  syntax:
    content: 'public abstract class AbstractElement<T> : IDICOMElement'
    content.vb: Public MustInherit Class AbstractElement(Of T) Implements IDICOMElement
    typeParameters:
    - id: T
      description: the data type of the element
  inheritance:
  - System.Object
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement()
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 16
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  syntax:
    content: public AbstractElement()
    content.vb: Public Sub New
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0[])
  id: '#ctor(EvilDICOM.Core.Element.Tag,`0[])'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement(Tag, T[])
  name.vb: AbstractElement(Tag, T())
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement(EvilDICOM.Core.Element.Tag, T[])
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement(EvilDICOM.Core.Element.Tag, T())
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 21
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  syntax:
    content: public AbstractElement(Tag tag, T[] dataArray)
    content.vb: Public Sub New(tag As Tag, dataArray As T())
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
    - id: dataArray
      type: '{T}[]'
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0)
  id: '#ctor(EvilDICOM.Core.Element.Tag,`0)'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement(Tag, T)
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement(EvilDICOM.Core.Element.Tag, T)
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement(EvilDICOM.Core.Element.Tag, T)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 28
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  syntax:
    content: public AbstractElement(Tag tag, T data)
    content.vb: Public Sub New(tag As Tag, data As T)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
    - id: data
      type: '{T}'
- uid: EvilDICOM.Core.Element.AbstractElement`1.VR
  id: VR
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: VR
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.VR
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).VR
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 38
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The value representation of the element
  example: []
  syntax:
    content: public VR VR { get; set; }
    content.vb: Public Property VR As VR
    parameters: []
    return:
      type: EvilDICOM.Core.Enums.VR
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data
  id: Data
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Data
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 48
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The data of the element
  example: []
  syntax:
    content: public virtual T Data { get; set; }
    content.vb: Public Overridable Property Data As T
    parameters: []
    return:
      type: '{T}'
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data_
  id: Data_
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Data_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data_
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data_
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 57
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The data of the element as a list (for multiple data)
  example: []
  syntax:
    content: public virtual List<T> Data_ { get; set; }
    content.vb: Public Overridable Property Data_ As List(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
- uid: EvilDICOM.Core.Element.AbstractElement`1.Tag
  id: Tag
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Tag
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Tag
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Tag
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 66
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The tag of the element
  example: []
  syntax:
    content: public Tag Tag { get; set; }
    content.vb: Public Property Tag As Tag
    parameters: []
    return:
      type: EvilDICOM.Core.Element.Tag
- uid: EvilDICOM.Core.Element.AbstractElement`1.DatType
  id: DatType
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DatType
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DatType
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DatType
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 71
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The clr type of the contained data
  example: []
  syntax:
    content: public Type DatType { get; }
    content.vb: Public ReadOnly Property DatType As Type
    parameters: []
    return:
      type: System.Type
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData
  id: DData
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DData
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 79
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: The non-typed data that can be accessed in a dynamic context
  example: []
  syntax:
    content: public object DData { get; set; }
    content.vb: Public Property DData As Object
    parameters: []
    return:
      type: System.Object
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData_
  id: DData_
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DData_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData_
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData_
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 88
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  syntax:
    content: public ICollection DData_ { get; set; }
    content.vb: Public Property DData_ As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
- uid: EvilDICOM.Core.Element.AbstractElement`1.ToString
  id: ToString
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.ToString()
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).ToString()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 98
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: To string override to visualize tag and vr of element
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: 
  overridden: System.Object.ToString
- uid: EvilDICOM.Core.Element.AbstractElement`1.SetData(`0)
  id: SetData(`0)
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: SetData(T)
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.SetData(T)
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).SetData(T)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 115
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: Plumbing method wrap the data in a DICOMData container
  example: []
  syntax:
    content: public void SetData(T value)
    content.vb: Public Sub SetData(value As T)
    parameters:
    - id: value
      type: '{T}'
      description: the typed data
- uid: EvilDICOM.Core.Element.AbstractElement`1.SetData(`0[])
  id: SetData(`0[])
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: SetData(T[])
  name.vb: SetData(T())
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.SetData(T[])
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).SetData(T())
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 124
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: Plumbing method wrap the data in a DICOMData container
  example: []
  syntax:
    content: public void SetData(T[] dataArray)
    content.vb: Public Sub SetData(dataArray As T())
    parameters:
    - id: dataArray
      type: '{T}[]'
- uid: EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  id: GetDataOrDefault
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: GetDataOrDefault()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.GetDataOrDefault()
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).GetDataOrDefault()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 132
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: Plumbing method to get data from the underlying DICOMData object
  example: []
  syntax:
    content: public T GetDataOrDefault()
    content.vb: Public Function GetDataOrDefault As T
    return:
      type: '{T}'
references:
- uid: EvilDICOM.Core.Element
  isExternal: false
  name: EvilDICOM.Core.Element
  fullName: EvilDICOM.Core.Element
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: EvilDICOM.Core.Interfaces.IDICOMElement
  parent: EvilDICOM.Core.Interfaces
  isExternal: false
  name: IDICOMElement
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: EvilDICOM.Core.Interfaces
  isExternal: false
  name: EvilDICOM.Core.Interfaces
  fullName: EvilDICOM.Core.Interfaces
- uid: EvilDICOM.Core.Element.Tag
  parent: EvilDICOM.Core.Element
  isExternal: false
  name: Tag
  fullName: EvilDICOM.Core.Element.Tag
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: EvilDICOM.Core.Enums.VR
  parent: EvilDICOM.Core.Enums
  isExternal: false
  name: VR
  fullName: EvilDICOM.Core.Enums.VR
- uid: EvilDICOM.Core.Enums
  isExternal: false
  name: EvilDICOM.Core.Enums
  fullName: EvilDICOM.Core.Enums
- uid: System.Collections.Generic.List{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: true
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
