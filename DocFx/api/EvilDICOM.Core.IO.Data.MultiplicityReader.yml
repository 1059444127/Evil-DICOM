### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Data.MultiplicityReader
  commentId: T:EvilDICOM.Core.IO.Data.MultiplicityReader
  id: MultiplicityReader
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary``1(System.Byte[],System.Int32,Func{System.Byte[],``0})
  langs:
  - csharp
  - vb
  name: MultiplicityReader
  nameWithType: MultiplicityReader
  fullName: EvilDICOM.Core.IO.Data.MultiplicityReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: MultiplicityReader
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityReader.cs
    startLine: 9
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  summary: "\nHelps read DICOM data with VM &gt; 1\n"
  example: []
  syntax:
    content: 'public class MultiplicityReader : object'
    content.vb: >-
      Public Class MultiplicityReader
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary``1(System.Byte[],System.Int32,Func{System.Byte[],``0})
  commentId: M:EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary``1(System.Byte[],System.Int32,Func{System.Byte[],``0})
  id: ReadMultipleBinary``1(System.Byte[],System.Int32,Func{System.Byte[],``0})
  parent: EvilDICOM.Core.IO.Data.MultiplicityReader
  langs:
  - csharp
  - vb
  name: ReadMultipleBinary<T>(Byte[], Int32, Func<Byte[], T>)
  nameWithType: MultiplicityReader.ReadMultipleBinary<T>(Byte[], Int32, Func<Byte[], T>)
  fullName: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary<T>(System.Byte[], System.Int32, Func<System.Byte[], T>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadMultipleBinary
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityReader.cs
    startLine: 20
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  summary: "\nReads binary data that has been concated with no delimiter. Returns an array of each instance of data in the\nconcated bytes.\n"
  example: []
  syntax:
    content: public static T[] ReadMultipleBinary<T>(byte[] data, int singleLength, Func<byte[], T> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
      description: the concated data (also accepts data with no concation)
    - id: singleLength
      type: System.Int32
      description: the length in bytes of each data item
    - id: readSingleFunc
      type: Func{System.Byte[],{T}}
      description: the function to use to parse each data element in the concated bytes
    typeParameters:
    - id: T
      description: the type of data in the bytes
    return:
      type: '{T}[]'
      description: an array of each data instance
    content.vb: Public Shared Function ReadMultipleBinary(Of T)(data As Byte(), singleLength As Integer, readSingleFunc As Func(Of Byte(), T)) As T()
  overload: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary*
  nameWithType.vb: MultiplicityReader.ReadMultipleBinary(Of T)(Byte(), Int32, Func(Of Byte(), T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary(Of T)(System.Byte(), System.Int32, Func(Of System.Byte(), T))
  name.vb: ReadMultipleBinary(Of T)(Byte(), Int32, Func(Of Byte(), T))
references:
- uid: EvilDICOM.Core.IO.Data
  commentId: N:EvilDICOM.Core.IO.Data
  isExternal: false
  name: EvilDICOM.Core.IO.Data
  nameWithType: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary*
  commentId: Overload:EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary
  isExternal: false
  name: ReadMultipleBinary
  nameWithType: MultiplicityReader.ReadMultipleBinary
  fullName: EvilDICOM.Core.IO.Data.MultiplicityReader.ReadMultipleBinary
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Func{System.Byte[],{T}}
  commentId: '!:Func{System.Byte[],``0}'
  definition: Func`2
  name: Func<Byte[], T>
  nameWithType: Func<Byte[], T>
  fullName: Func<System.Byte[], T>
  nameWithType.vb: Func(Of Byte(), T)
  fullName.vb: Func(Of System.Byte(), T)
  name.vb: Func(Of Byte(), T)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
