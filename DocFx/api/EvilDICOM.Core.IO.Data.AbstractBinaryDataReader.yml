### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  commentId: T:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  id: AbstractBinaryDataReader
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],Func{System.Byte[],System.Double})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],Func{System.Byte[],System.Int32})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],Func{System.Byte[],System.Int16})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],Func{System.Byte[],System.Single})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],Func{System.Byte[],System.UInt32})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],Func{System.Byte[],System.UInt16})
  langs:
  - csharp
  - vb
  name: AbstractBinaryDataReader
  nameWithType: AbstractBinaryDataReader
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: AbstractBinaryDataReader
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: 'public abstract class AbstractBinaryDataReader : object'
    content.vb: >-
      Public MustInherit Class AbstractBinaryDataReader
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - EvilDICOM.Core.IO.Data.BigEndianReader
  - EvilDICOM.Core.IO.Data.LittleEndianReader
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  id: ReadTag(System.Byte[],Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadTag(Byte[], Func<Byte[], Tag>)
  nameWithType: AbstractBinaryDataReader.ReadTag(Byte[], Func<Byte[], Tag>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[], Func<System.Byte[], EvilDICOM.Core.Element.Tag>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadTag
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 9
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static Tag[] ReadTag(byte[] data, Func<byte[], Tag> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],EvilDICOM.Core.Element.Tag}
    return:
      type: EvilDICOM.Core.Element.Tag[]
    content.vb: Public Shared Function ReadTag(data As Byte(), readSingleFunc As Func(Of Byte(), Tag)) As Tag()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag*
  nameWithType.vb: AbstractBinaryDataReader.ReadTag(Byte(), Func(Of Byte(), Tag))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte(), Func(Of System.Byte(), EvilDICOM.Core.Element.Tag))
  name.vb: ReadTag(Byte(), Func(Of Byte(), Tag))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],Func{System.Byte[],System.Single})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],Func{System.Byte[],System.Single})
  id: ReadSinglePrecision(System.Byte[],Func{System.Byte[],System.Single})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadSinglePrecision(Byte[], Func<Byte[], Single>)
  nameWithType: AbstractBinaryDataReader.ReadSinglePrecision(Byte[], Func<Byte[], Single>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[], Func<System.Byte[], System.Single>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadSinglePrecision
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 18
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static float[] ReadSinglePrecision(byte[] data, Func<byte[], float> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.Single}
    return:
      type: System.Single[]
    content.vb: Public Shared Function ReadSinglePrecision(data As Byte(), readSingleFunc As Func(Of Byte(), Single)) As Single()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision*
  nameWithType.vb: AbstractBinaryDataReader.ReadSinglePrecision(Byte(), Func(Of Byte(), Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte(), Func(Of System.Byte(), System.Single))
  name.vb: ReadSinglePrecision(Byte(), Func(Of Byte(), Single))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],Func{System.Byte[],System.Double})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],Func{System.Byte[],System.Double})
  id: ReadDoublePrecision(System.Byte[],Func{System.Byte[],System.Double})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadDoublePrecision(Byte[], Func<Byte[], Double>)
  nameWithType: AbstractBinaryDataReader.ReadDoublePrecision(Byte[], Func<Byte[], Double>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[], Func<System.Byte[], System.Double>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadDoublePrecision
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static double[] ReadDoublePrecision(byte[] data, Func<byte[], double> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.Double}
    return:
      type: System.Double[]
    content.vb: Public Shared Function ReadDoublePrecision(data As Byte(), readSingleFunc As Func(Of Byte(), Double)) As Double()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision*
  nameWithType.vb: AbstractBinaryDataReader.ReadDoublePrecision(Byte(), Func(Of Byte(), Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte(), Func(Of System.Byte(), System.Double))
  name.vb: ReadDoublePrecision(Byte(), Func(Of Byte(), Double))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],Func{System.Byte[],System.Int32})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],Func{System.Byte[],System.Int32})
  id: ReadSignedLong(System.Byte[],Func{System.Byte[],System.Int32})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadSignedLong(Byte[], Func<Byte[], Int32>)
  nameWithType: AbstractBinaryDataReader.ReadSignedLong(Byte[], Func<Byte[], Int32>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[], Func<System.Byte[], System.Int32>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadSignedLong
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 36
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static int[] ReadSignedLong(byte[] data, Func<byte[], int> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.Int32}
    return:
      type: System.Int32[]
    content.vb: Public Shared Function ReadSignedLong(data As Byte(), readSingleFunc As Func(Of Byte(), Integer)) As Integer()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong*
  nameWithType.vb: AbstractBinaryDataReader.ReadSignedLong(Byte(), Func(Of Byte(), Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte(), Func(Of System.Byte(), System.Int32))
  name.vb: ReadSignedLong(Byte(), Func(Of Byte(), Int32))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],Func{System.Byte[],System.UInt32})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],Func{System.Byte[],System.UInt32})
  id: ReadUnsignedLong(System.Byte[],Func{System.Byte[],System.UInt32})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedLong(Byte[], Func<Byte[], UInt32>)
  nameWithType: AbstractBinaryDataReader.ReadUnsignedLong(Byte[], Func<Byte[], UInt32>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[], Func<System.Byte[], System.UInt32>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadUnsignedLong
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 45
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static uint[] ReadUnsignedLong(byte[] data, Func<byte[], uint> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.UInt32}
    return:
      type: System.UInt32[]
    content.vb: Public Shared Function ReadUnsignedLong(data As Byte(), readSingleFunc As Func(Of Byte(), UInteger)) As UInteger()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong*
  nameWithType.vb: AbstractBinaryDataReader.ReadUnsignedLong(Byte(), Func(Of Byte(), UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte(), Func(Of System.Byte(), System.UInt32))
  name.vb: ReadUnsignedLong(Byte(), Func(Of Byte(), UInt32))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],Func{System.Byte[],System.Int16})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],Func{System.Byte[],System.Int16})
  id: ReadSignedShort(System.Byte[],Func{System.Byte[],System.Int16})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadSignedShort(Byte[], Func<Byte[], Int16>)
  nameWithType: AbstractBinaryDataReader.ReadSignedShort(Byte[], Func<Byte[], Int16>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[], Func<System.Byte[], System.Int16>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadSignedShort
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 54
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static short[] ReadSignedShort(byte[] data, Func<byte[], short> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.Int16}
    return:
      type: System.Int16[]
    content.vb: Public Shared Function ReadSignedShort(data As Byte(), readSingleFunc As Func(Of Byte(), Short)) As Short()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort*
  nameWithType.vb: AbstractBinaryDataReader.ReadSignedShort(Byte(), Func(Of Byte(), Int16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte(), Func(Of System.Byte(), System.Int16))
  name.vb: ReadSignedShort(Byte(), Func(Of Byte(), Int16))
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],Func{System.Byte[],System.UInt16})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],Func{System.Byte[],System.UInt16})
  id: ReadUnsignedShort(System.Byte[],Func{System.Byte[],System.UInt16})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedShort(Byte[], Func<Byte[], UInt16>)
  nameWithType: AbstractBinaryDataReader.ReadUnsignedShort(Byte[], Func<Byte[], UInt16>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[], Func<System.Byte[], System.UInt16>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadUnsignedShort
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/AbstractBinaryDataReader.cs
    startLine: 63
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static ushort[] ReadUnsignedShort(byte[] data, Func<byte[], ushort> readSingleFunc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: readSingleFunc
      type: Func{System.Byte[],System.UInt16}
    return:
      type: System.UInt16[]
    content.vb: Public Shared Function ReadUnsignedShort(data As Byte(), readSingleFunc As Func(Of Byte(), UShort)) As UShort()
  overload: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort*
  nameWithType.vb: AbstractBinaryDataReader.ReadUnsignedShort(Byte(), Func(Of Byte(), UInt16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte(), Func(Of System.Byte(), System.UInt16))
  name.vb: ReadUnsignedShort(Byte(), Func(Of Byte(), UInt16))
references:
- uid: EvilDICOM.Core.IO.Data
  commentId: N:EvilDICOM.Core.IO.Data
  isExternal: false
  name: EvilDICOM.Core.IO.Data
  nameWithType: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag
  isExternal: false
  name: ReadTag
  nameWithType: AbstractBinaryDataReader.ReadTag
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func{System.Byte[],EvilDICOM.Core.Element.Tag}
  commentId: '!:Func{System.Byte[],EvilDICOM.Core.Element.Tag}'
  definition: Func`2
  name: Func<Byte[], Tag>
  nameWithType: Func<Byte[], Tag>
  fullName: Func<System.Byte[], EvilDICOM.Core.Element.Tag>
  nameWithType.vb: Func(Of Byte(), Tag)
  fullName.vb: Func(Of System.Byte(), EvilDICOM.Core.Element.Tag)
  name.vb: Func(Of Byte(), Tag)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Element.Tag[]
  name: Tag[]
  nameWithType: Tag[]
  fullName: EvilDICOM.Core.Element.Tag[]
  nameWithType.vb: Tag()
  fullName.vb: EvilDICOM.Core.Element.Tag()
  name.vb: Tag()
  spec.csharp:
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision
  isExternal: false
  name: ReadSinglePrecision
  nameWithType: AbstractBinaryDataReader.ReadSinglePrecision
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision
- uid: Func{System.Byte[],System.Single}
  commentId: '!:Func{System.Byte[],System.Single}'
  definition: Func`2
  name: Func<Byte[], Single>
  nameWithType: Func<Byte[], Single>
  fullName: Func<System.Byte[], System.Single>
  nameWithType.vb: Func(Of Byte(), Single)
  fullName.vb: Func(Of System.Byte(), System.Single)
  name.vb: Func(Of Byte(), Single)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single[]
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision
  isExternal: false
  name: ReadDoublePrecision
  nameWithType: AbstractBinaryDataReader.ReadDoublePrecision
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision
- uid: Func{System.Byte[],System.Double}
  commentId: '!:Func{System.Byte[],System.Double}'
  definition: Func`2
  name: Func<Byte[], Double>
  nameWithType: Func<Byte[], Double>
  fullName: Func<System.Byte[], System.Double>
  nameWithType.vb: Func(Of Byte(), Double)
  fullName.vb: Func(Of System.Byte(), System.Double)
  name.vb: Func(Of Byte(), Double)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double[]
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong
  isExternal: false
  name: ReadSignedLong
  nameWithType: AbstractBinaryDataReader.ReadSignedLong
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong
- uid: Func{System.Byte[],System.Int32}
  commentId: '!:Func{System.Byte[],System.Int32}'
  definition: Func`2
  name: Func<Byte[], Int32>
  nameWithType: Func<Byte[], Int32>
  fullName: Func<System.Byte[], System.Int32>
  nameWithType.vb: Func(Of Byte(), Int32)
  fullName.vb: Func(Of System.Byte(), System.Int32)
  name.vb: Func(Of Byte(), Int32)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong
  isExternal: false
  name: ReadUnsignedLong
  nameWithType: AbstractBinaryDataReader.ReadUnsignedLong
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong
- uid: Func{System.Byte[],System.UInt32}
  commentId: '!:Func{System.Byte[],System.UInt32}'
  definition: Func`2
  name: Func<Byte[], UInt32>
  nameWithType: Func<Byte[], UInt32>
  fullName: Func<System.Byte[], System.UInt32>
  nameWithType.vb: Func(Of Byte(), UInt32)
  fullName.vb: Func(Of System.Byte(), System.UInt32)
  name.vb: Func(Of Byte(), UInt32)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt32[]
  name: UInt32[]
  nameWithType: UInt32[]
  fullName: System.UInt32[]
  nameWithType.vb: UInt32()
  fullName.vb: System.UInt32()
  name.vb: UInt32()
  spec.csharp:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort
  isExternal: false
  name: ReadSignedShort
  nameWithType: AbstractBinaryDataReader.ReadSignedShort
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort
- uid: Func{System.Byte[],System.Int16}
  commentId: '!:Func{System.Byte[],System.Int16}'
  definition: Func`2
  name: Func<Byte[], Int16>
  nameWithType: Func<Byte[], Int16>
  fullName: Func<System.Byte[], System.Int16>
  nameWithType.vb: Func(Of Byte(), Int16)
  fullName.vb: Func(Of System.Byte(), System.Int16)
  name.vb: Func(Of Byte(), Int16)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int16[]
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullName.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort
  isExternal: false
  name: ReadUnsignedShort
  nameWithType: AbstractBinaryDataReader.ReadUnsignedShort
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort
- uid: Func{System.Byte[],System.UInt16}
  commentId: '!:Func{System.Byte[],System.UInt16}'
  definition: Func`2
  name: Func<Byte[], UInt16>
  nameWithType: Func<Byte[], UInt16>
  fullName: Func<System.Byte[], System.UInt16>
  nameWithType.vb: Func(Of Byte(), UInt16)
  fullName.vb: Func(Of System.Byte(), System.UInt16)
  name.vb: Func(Of Byte(), UInt16)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt16[]
  name: UInt16[]
  nameWithType: UInt16[]
  fullName: System.UInt16[]
  nameWithType.vb: UInt16()
  fullName.vb: System.UInt16()
  name.vb: UInt16()
  spec.csharp:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
