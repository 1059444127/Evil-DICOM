### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  commentId: T:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  id: DICOMBinaryWriter
  parent: EvilDICOM.Core.IO.Writing
  children:
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(Stream)
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(System.String)
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte)
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte[])
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Char[])
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.String)
  - EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes(System.Int32)
  langs:
  - csharp
  - vb
  name: DICOMBinaryWriter
  nameWithType: DICOMBinaryWriter
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DICOMBinaryWriter
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 6
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: 'public class DICOMBinaryWriter : IDisposable'
    content.vb: >-
      Public Class DICOMBinaryWriter
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(System.String)
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: DICOMBinaryWriter(String)
  nameWithType: DICOMBinaryWriter.DICOMBinaryWriter(String)
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.DICOMBinaryWriter(System.String)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  summary: "\nConstructs a new writer from a file path.\n"
  example: []
  syntax:
    content: public DICOMBinaryWriter(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: path to the file to be written
    content.vb: Public Sub New(filePath As String)
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(Stream)
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor(Stream)
  id: '#ctor(Stream)'
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: DICOMBinaryWriter(Stream)
  nameWithType: DICOMBinaryWriter.DICOMBinaryWriter(Stream)
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.DICOMBinaryWriter(Stream)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 21
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public DICOMBinaryWriter(Stream stream)
    parameters:
    - id: stream
      type: Stream
    content.vb: Public Sub New(stream As Stream)
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose
  id: Dispose
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DICOMBinaryWriter.Dispose()
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Dispose
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 26
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte)
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte)
  id: Write(System.Byte)
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Byte)
  nameWithType: DICOMBinaryWriter.Write(Byte)
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Write
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 31
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void Write(byte b)
    parameters:
    - id: b
      type: System.Byte
    content.vb: Public Sub Write(b As Byte)
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Byte[])
  nameWithType: DICOMBinaryWriter.Write(Byte[])
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Write
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 36
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void Write(byte[] bytes)
    parameters:
    - id: bytes
      type: System.Byte[]
    content.vb: Public Sub Write(bytes As Byte())
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write*
  nameWithType.vb: DICOMBinaryWriter.Write(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Byte())
  name.vb: Write(Byte())
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Char[])
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Char[])
  id: Write(System.Char[])
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: Write(Char[])
  nameWithType: DICOMBinaryWriter.Write(Char[])
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Char[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Write
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 41
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void Write(char[] chars)
    parameters:
    - id: chars
      type: System.Char[]
    content.vb: Public Sub Write(chars As Char())
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write*
  nameWithType.vb: DICOMBinaryWriter.Write(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.Char())
  name.vb: Write(Char())
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.String)
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.String)
  id: Write(System.String)
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  nameWithType: DICOMBinaryWriter.Write(String)
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Write
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 46
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void Write(string chars)
    parameters:
    - id: chars
      type: System.String
    content.vb: Public Sub Write(chars As String)
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes(System.Int32)
  commentId: M:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes(System.Int32)
  id: WriteNullBytes(System.Int32)
  parent: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter
  langs:
  - csharp
  - vb
  name: WriteNullBytes(Int32)
  nameWithType: DICOMBinaryWriter.WriteNullBytes(Int32)
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteNullBytes
    path: ../EvilDICOM/EvilDICOM/Core/IO/Writing/DICOMBinaryWriter.cs
    startLine: 52
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Writing
  syntax:
    content: public void WriteNullBytes(int numberToWrite)
    parameters:
    - id: numberToWrite
      type: System.Int32
    content.vb: Public Sub WriteNullBytes(numberToWrite As Integer)
  overload: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EvilDICOM.Core.IO.Writing
  commentId: N:EvilDICOM.Core.IO.Writing
  isExternal: false
  name: EvilDICOM.Core.IO.Writing
  nameWithType: EvilDICOM.Core.IO.Writing
  fullName: EvilDICOM.Core.IO.Writing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor*
  commentId: Overload:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.#ctor
  isExternal: false
  name: DICOMBinaryWriter
  nameWithType: DICOMBinaryWriter.DICOMBinaryWriter
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.DICOMBinaryWriter
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose*
  commentId: Overload:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DICOMBinaryWriter.Dispose
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Dispose
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write*
  commentId: Overload:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write
  isExternal: false
  name: Write
  nameWithType: DICOMBinaryWriter.Write
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.Write
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes*
  commentId: Overload:EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes
  isExternal: false
  name: WriteNullBytes
  nameWithType: DICOMBinaryWriter.WriteNullBytes
  fullName: EvilDICOM.Core.IO.Writing.DICOMBinaryWriter.WriteNullBytes
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
