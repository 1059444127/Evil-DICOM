### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Modules.Patient
  commentId: T:EvilDICOM.Core.Modules.Patient
  id: Patient
  parent: EvilDICOM.Core.Modules
  children:
  - EvilDICOM.Core.Modules.Patient.BirthDate
  - EvilDICOM.Core.Modules.Patient.Elements
  - EvilDICOM.Core.Modules.Patient.ID
  - EvilDICOM.Core.Modules.Patient.Name
  - EvilDICOM.Core.Modules.Patient.Sex
  langs:
  - csharp
  - vb
  name: Patient
  nameWithType: Patient
  fullName: EvilDICOM.Core.Modules.Patient
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Patient
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: 'public class Patient : object, IIOD'
    content.vb: >-
      Public Class Patient
          Inherits Object
          Implements IIOD
  inheritance:
  - System.Object
  implements:
  - EvilDICOM.Core.Interfaces.IIOD
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.Modules.Patient.Name
  commentId: P:EvilDICOM.Core.Modules.Patient.Name
  id: Name
  parent: EvilDICOM.Core.Modules.Patient
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Patient.Name
  fullName: EvilDICOM.Core.Modules.Patient.Name
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Name
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 15
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: EvilDICOM.Core.Modules.Patient.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.Modules.Patient.ID
  commentId: P:EvilDICOM.Core.Modules.Patient.ID
  id: ID
  parent: EvilDICOM.Core.Modules.Patient
  langs:
  - csharp
  - vb
  name: ID
  nameWithType: Patient.ID
  fullName: EvilDICOM.Core.Modules.Patient.ID
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ID
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 21
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: public string ID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ID As String
  overload: EvilDICOM.Core.Modules.Patient.ID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.Modules.Patient.BirthDate
  commentId: P:EvilDICOM.Core.Modules.Patient.BirthDate
  id: BirthDate
  parent: EvilDICOM.Core.Modules.Patient
  langs:
  - csharp
  - vb
  name: BirthDate
  nameWithType: Patient.BirthDate
  fullName: EvilDICOM.Core.Modules.Patient.BirthDate
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: BirthDate
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: public System.DateTime? BirthDate { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Property BirthDate As System.DateTime?
  overload: EvilDICOM.Core.Modules.Patient.BirthDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.Modules.Patient.Sex
  commentId: P:EvilDICOM.Core.Modules.Patient.Sex
  id: Sex
  parent: EvilDICOM.Core.Modules.Patient
  langs:
  - csharp
  - vb
  name: Sex
  nameWithType: Patient.Sex
  fullName: EvilDICOM.Core.Modules.Patient.Sex
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Sex
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 33
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: public string Sex { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Sex As String
  overload: EvilDICOM.Core.Modules.Patient.Sex*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.Modules.Patient.Elements
  commentId: P:EvilDICOM.Core.Modules.Patient.Elements
  id: Elements
  parent: EvilDICOM.Core.Modules.Patient
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: Patient.Elements
  fullName: EvilDICOM.Core.Modules.Patient.Elements
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: Elements
    path: ../EvilDICOM/EvilDICOM/Core/Modules/Patient.cs
    startLine: 39
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Modules
  syntax:
    content: public List<IDICOMElement> Elements { get; }
    parameters: []
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
    content.vb: Public ReadOnly Property Elements As List(Of IDICOMElement)
  overload: EvilDICOM.Core.Modules.Patient.Elements*
  implements:
  - EvilDICOM.Core.Interfaces.IIOD.Elements
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: EvilDICOM.Core.Modules
  commentId: N:EvilDICOM.Core.Modules
  isExternal: false
  name: EvilDICOM.Core.Modules
  nameWithType: EvilDICOM.Core.Modules
  fullName: EvilDICOM.Core.Modules
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.Interfaces.IIOD
  commentId: T:EvilDICOM.Core.Interfaces.IIOD
  parent: EvilDICOM.Core.Interfaces
  isExternal: false
  name: IIOD
  nameWithType: IIOD
  fullName: EvilDICOM.Core.Interfaces.IIOD
- uid: EvilDICOM.Core.Interfaces
  commentId: N:EvilDICOM.Core.Interfaces
  isExternal: false
  name: EvilDICOM.Core.Interfaces
  nameWithType: EvilDICOM.Core.Interfaces
  fullName: EvilDICOM.Core.Interfaces
- uid: EvilDICOM.Core.Modules.Patient.Name*
  commentId: Overload:EvilDICOM.Core.Modules.Patient.Name
  isExternal: false
  name: Name
  nameWithType: Patient.Name
  fullName: EvilDICOM.Core.Modules.Patient.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EvilDICOM.Core.Modules.Patient.ID*
  commentId: Overload:EvilDICOM.Core.Modules.Patient.ID
  isExternal: false
  name: ID
  nameWithType: Patient.ID
  fullName: EvilDICOM.Core.Modules.Patient.ID
- uid: EvilDICOM.Core.Modules.Patient.BirthDate*
  commentId: Overload:EvilDICOM.Core.Modules.Patient.BirthDate
  isExternal: false
  name: BirthDate
  nameWithType: Patient.BirthDate
  fullName: EvilDICOM.Core.Modules.Patient.BirthDate
- uid: System.Nullable{System.DateTime}
  commentId: '!:System.Nullable{System.DateTime}'
  definition: System.Nullable`1
  name: Nullable<System.DateTime>
  nameWithType: Nullable<System.DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of System.DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of System.DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: System.DateTime
    nameWithType: System.DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: System.DateTime
    nameWithType: System.DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Modules.Patient.Sex*
  commentId: Overload:EvilDICOM.Core.Modules.Patient.Sex
  isExternal: false
  name: Sex
  nameWithType: Patient.Sex
  fullName: EvilDICOM.Core.Modules.Patient.Sex
- uid: EvilDICOM.Core.Modules.Patient.Elements*
  commentId: Overload:EvilDICOM.Core.Modules.Patient.Elements
  isExternal: false
  name: Elements
  nameWithType: Patient.Elements
  fullName: EvilDICOM.Core.Modules.Patient.Elements
- uid: EvilDICOM.Core.Interfaces.IIOD.Elements
  commentId: P:EvilDICOM.Core.Interfaces.IIOD.Elements
  parent: EvilDICOM.Core.Interfaces.IIOD
  isExternal: false
  name: Elements
  nameWithType: IIOD.Elements
  fullName: EvilDICOM.Core.Interfaces.IIOD.Elements
- uid: List{EvilDICOM.Core.Interfaces.IDICOMElement}
  commentId: '!:List{EvilDICOM.Core.Interfaces.IDICOMElement}'
  definition: List`1
  name: List<IDICOMElement>
  nameWithType: List<IDICOMElement>
  fullName: List<EvilDICOM.Core.Interfaces.IDICOMElement>
  nameWithType.vb: List(Of IDICOMElement)
  fullName.vb: List(Of EvilDICOM.Core.Interfaces.IDICOMElement)
  name.vb: List(Of IDICOMElement)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
