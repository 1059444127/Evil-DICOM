items:
- uid: EvilDICOM.RT.DoseMatrix
  id: DoseMatrix
  parent: EvilDICOM.RT
  children:
  - EvilDICOM.RT.DoseMatrix.#ctor(EvilDICOM.Core.DICOMObject)
  - EvilDICOM.RT.DoseMatrix.ConvertRelToAbs(System.Double)
  - EvilDICOM.RT.DoseMatrix.DimensionX
  - EvilDICOM.RT.DoseMatrix.DimensionY
  - EvilDICOM.RT.DoseMatrix.DimensionZ
  - EvilDICOM.RT.DoseMatrix.DirectionalCosines
  - EvilDICOM.RT.DoseMatrix.DoseValues
  - EvilDICOM.RT.DoseMatrix.GetLineDose(EvilDICOM.Core.Helpers.Vector3,EvilDICOM.Core.Helpers.Vector3,System.Double)
  - EvilDICOM.RT.DoseMatrix.GetPointDose(EvilDICOM.Core.Helpers.Vector3)
  - EvilDICOM.RT.DoseMatrix.GetPointDose(System.Double,System.Double,System.Double)
  - EvilDICOM.RT.DoseMatrix.IndexToLatticeXYZ(System.Int32,System.Int32@,System.Int32@,System.Int32@)
  - EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)
  - EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32@)
  - EvilDICOM.RT.DoseMatrix.Load(System.String)
  - EvilDICOM.RT.DoseMatrix.MaxPointDose
  - EvilDICOM.RT.DoseMatrix.Save(System.String)
  - EvilDICOM.RT.DoseMatrix.Scaling
  - EvilDICOM.RT.DoseMatrix.ToDICOM
  - EvilDICOM.RT.DoseMatrix.ValueSizeInBytes
  - EvilDICOM.RT.DoseMatrix.X0
  - EvilDICOM.RT.DoseMatrix.XMax
  - EvilDICOM.RT.DoseMatrix.XRes
  - EvilDICOM.RT.DoseMatrix.Y0
  - EvilDICOM.RT.DoseMatrix.YMax
  - EvilDICOM.RT.DoseMatrix.YRes
  - EvilDICOM.RT.DoseMatrix.Z0
  - EvilDICOM.RT.DoseMatrix.ZMax
  - EvilDICOM.RT.DoseMatrix.ZRes
  langs:
  - csharp
  - vb
  name: DoseMatrix
  fullName: EvilDICOM.RT.DoseMatrix
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public class DoseMatrix
    content.vb: Public Class DoseMatrix
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.RT.DoseMatrix.DoseValues
  id: DoseValues
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DoseValues
  fullName: EvilDICOM.RT.DoseMatrix.DoseValues
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 17
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public List<double> DoseValues { get; set; }
    content.vb: Public Property DoseValues As List(Of Double)
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Double}
- uid: EvilDICOM.RT.DoseMatrix.Load(System.String)
  id: Load(System.String)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: Load(String)
  fullName: EvilDICOM.RT.DoseMatrix.Load(System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public static DoseMatrix Load(string dcmFile)
    content.vb: Public Shared Function Load(dcmFile As String) As DoseMatrix
    parameters:
    - id: dcmFile
      type: System.String
    return:
      type: EvilDICOM.RT.DoseMatrix
- uid: EvilDICOM.RT.DoseMatrix.#ctor(EvilDICOM.Core.DICOMObject)
  id: '#ctor(EvilDICOM.Core.DICOMObject)'
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DoseMatrix(DICOMObject)
  fullName: EvilDICOM.RT.DoseMatrix.DoseMatrix(EvilDICOM.Core.DICOMObject)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DoseMatrix(DICOMObject dcm)
    content.vb: Public Sub New(dcm As DICOMObject)
    parameters:
    - id: dcm
      type: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.RT.DoseMatrix.ValueSizeInBytes
  id: ValueSizeInBytes
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: ValueSizeInBytes
  fullName: EvilDICOM.RT.DoseMatrix.ValueSizeInBytes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 50
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public int ValueSizeInBytes { get; set; }
    content.vb: Public Property ValueSizeInBytes As Integer
    parameters: []
    return:
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.GetLineDose(EvilDICOM.Core.Helpers.Vector3,EvilDICOM.Core.Helpers.Vector3,System.Double)
  id: GetLineDose(EvilDICOM.Core.Helpers.Vector3,EvilDICOM.Core.Helpers.Vector3,System.Double)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: GetLineDose(Vector3, Vector3, Double)
  fullName: EvilDICOM.RT.DoseMatrix.GetLineDose(EvilDICOM.Core.Helpers.Vector3, EvilDICOM.Core.Helpers.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 59
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  summary: Scrapes a dose matrix along the line from startXYZ in mm to endXYZ in mm
  example: []
  syntax:
    content: public List<DoseValue> GetLineDose(Vector3 startXYZmm, Vector3 endXYZmm, double resolution_mm = 2)
    content.vb: Public Function GetLineDose(startXYZmm As Vector3, endXYZmm As Vector3, resolution_mm As Double = 2) As List(Of DoseValue)
    parameters:
    - id: startXYZmm
      type: EvilDICOM.Core.Helpers.Vector3
      description: the starting position of the line
    - id: endXYZmm
      type: EvilDICOM.Core.Helpers.Vector3
      description: the end position of the line
    - id: resolution_mm
      type: System.Double
      description: the resolution to interoplate the line dose (default 2 mm)
    return:
      type: System.Collections.Generic.List{EvilDICOM.RT.DoseValue}
      description: a list of dose values at the specified resolution along the line
- uid: EvilDICOM.RT.DoseMatrix.XRes
  id: XRes
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: XRes
  fullName: EvilDICOM.RT.DoseMatrix.XRes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 82
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double XRes { get; set; }
    content.vb: Public Property XRes As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.YRes
  id: YRes
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: YRes
  fullName: EvilDICOM.RT.DoseMatrix.YRes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 83
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double YRes { get; set; }
    content.vb: Public Property YRes As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.ZRes
  id: ZRes
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: ZRes
  fullName: EvilDICOM.RT.DoseMatrix.ZRes
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 84
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double ZRes { get; }
    content.vb: Public ReadOnly Property ZRes As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.X0
  id: X0
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: X0
  fullName: EvilDICOM.RT.DoseMatrix.X0
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 86
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double X0 { get; set; }
    content.vb: Public Property X0 As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.Y0
  id: Y0
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: Y0
  fullName: EvilDICOM.RT.DoseMatrix.Y0
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 87
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Y0 { get; set; }
    content.vb: Public Property Y0 As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.Z0
  id: Z0
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: Z0
  fullName: EvilDICOM.RT.DoseMatrix.Z0
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 88
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Z0 { get; set; }
    content.vb: Public Property Z0 As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.XMax
  id: XMax
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: XMax
  fullName: EvilDICOM.RT.DoseMatrix.XMax
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 90
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double XMax { get; }
    content.vb: Public ReadOnly Property XMax As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.YMax
  id: YMax
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: YMax
  fullName: EvilDICOM.RT.DoseMatrix.YMax
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 91
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double YMax { get; }
    content.vb: Public ReadOnly Property YMax As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.ZMax
  id: ZMax
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: ZMax
  fullName: EvilDICOM.RT.DoseMatrix.ZMax
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 92
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double ZMax { get; }
    content.vb: Public ReadOnly Property ZMax As Double
    parameters: []
    return:
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.DimensionX
  id: DimensionX
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DimensionX
  fullName: EvilDICOM.RT.DoseMatrix.DimensionX
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 94
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public int DimensionX { get; set; }
    content.vb: Public Property DimensionX As Integer
    parameters: []
    return:
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.DimensionY
  id: DimensionY
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DimensionY
  fullName: EvilDICOM.RT.DoseMatrix.DimensionY
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 95
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public int DimensionY { get; set; }
    content.vb: Public Property DimensionY As Integer
    parameters: []
    return:
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.DimensionZ
  id: DimensionZ
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DimensionZ
  fullName: EvilDICOM.RT.DoseMatrix.DimensionZ
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 96
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public int DimensionZ { get; set; }
    content.vb: Public Property DimensionZ As Integer
    parameters: []
    return:
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.GetPointDose(System.Double,System.Double,System.Double)
  id: GetPointDose(System.Double,System.Double,System.Double)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: GetPointDose(Double, Double, Double)
  fullName: EvilDICOM.RT.DoseMatrix.GetPointDose(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 98
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DoseValue GetPointDose(double x, double y, double z)
    content.vb: Public Function GetPointDose(x As Double, y As Double, z As Double) As DoseValue
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    return:
      type: EvilDICOM.RT.DoseValue
- uid: EvilDICOM.RT.DoseMatrix.GetPointDose(EvilDICOM.Core.Helpers.Vector3)
  id: GetPointDose(EvilDICOM.Core.Helpers.Vector3)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: GetPointDose(Vector3)
  fullName: EvilDICOM.RT.DoseMatrix.GetPointDose(EvilDICOM.Core.Helpers.Vector3)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 130
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DoseValue GetPointDose(Vector3 pt)
    content.vb: Public Function GetPointDose(pt As Vector3) As DoseValue
    parameters:
    - id: pt
      type: EvilDICOM.Core.Helpers.Vector3
    return:
      type: EvilDICOM.RT.DoseValue
- uid: EvilDICOM.RT.DoseMatrix.MaxPointDose
  id: MaxPointDose
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: MaxPointDose
  fullName: EvilDICOM.RT.DoseMatrix.MaxPointDose
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 143
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DoseValue MaxPointDose { get; }
    content.vb: Public ReadOnly Property MaxPointDose As DoseValue
    parameters: []
    return:
      type: EvilDICOM.RT.DoseValue
- uid: EvilDICOM.RT.DoseMatrix.IndexToLatticeXYZ(System.Int32,System.Int32@,System.Int32@,System.Int32@)
  id: IndexToLatticeXYZ(System.Int32,System.Int32@,System.Int32@,System.Int32@)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: IndexToLatticeXYZ(Int32, out Int32, out Int32, out Int32)
  name.vb: IndexToLatticeXYZ(Int32, ByRef Int32, ByRef Int32, ByRef Int32)
  fullName: EvilDICOM.RT.DoseMatrix.IndexToLatticeXYZ(System.Int32, out System.Int32, out System.Int32, out System.Int32)
  fullName.vb: EvilDICOM.RT.DoseMatrix.IndexToLatticeXYZ(System.Int32, ByRef System.Int32, ByRef System.Int32, ByRef System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 155
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public void IndexToLatticeXYZ(int index, out int x, out int y, out int z)
    content.vb: Public Sub IndexToLatticeXYZ(index As Integer, ByRef x As Integer, ByRef y As Integer, ByRef z As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)
  id: LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: LatticeXYZToIndex(Int32, Int32, Int32, Int32, Int32, out Int32)
  name.vb: LatticeXYZToIndex(Int32, Int32, Int32, Int32, Int32, ByRef Int32)
  fullName: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, out System.Int32)
  fullName.vb: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, ByRef System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 162
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public static void LatticeXYZToIndex(int x, int y, int z, int latticeWidth, int latticeHeight, out int index)
    content.vb: Public Shared Sub LatticeXYZToIndex(x As Integer, y As Integer, z As Integer, latticeWidth As Integer, latticeHeight As Integer, ByRef index As Integer)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
    - id: latticeWidth
      type: System.Int32
    - id: latticeHeight
      type: System.Int32
    - id: index
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32@)
  id: LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32@)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: LatticeXYZToIndex(Int32, Int32, Int32, out Int32)
  name.vb: LatticeXYZToIndex(Int32, Int32, Int32, ByRef Int32)
  fullName: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32, System.Int32, System.Int32, out System.Int32)
  fullName.vb: EvilDICOM.RT.DoseMatrix.LatticeXYZToIndex(System.Int32, System.Int32, System.Int32, ByRef System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 167
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public void LatticeXYZToIndex(int x, int y, int z, out int index)
    content.vb: Public Sub LatticeXYZToIndex(x As Integer, y As Integer, z As Integer, ByRef index As Integer)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
    - id: index
      type: System.Int32
- uid: EvilDICOM.RT.DoseMatrix.DirectionalCosines
  id: DirectionalCosines
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: DirectionalCosines
  fullName: EvilDICOM.RT.DoseMatrix.DirectionalCosines
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 172
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double[] DirectionalCosines { get; }
    content.vb: Public ReadOnly Property DirectionalCosines As Double()
    parameters: []
    return:
      type: System.Double[]
- uid: EvilDICOM.RT.DoseMatrix.ConvertRelToAbs(System.Double)
  id: ConvertRelToAbs(System.Double)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: ConvertRelToAbs(Double)
  fullName: EvilDICOM.RT.DoseMatrix.ConvertRelToAbs(System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 177
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public void ConvertRelToAbs(double totalDose)
    content.vb: Public Sub ConvertRelToAbs(totalDose As Double)
    parameters:
    - id: totalDose
      type: System.Double
- uid: EvilDICOM.RT.DoseMatrix.ToDICOM
  id: ToDICOM
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: ToDICOM()
  fullName: EvilDICOM.RT.DoseMatrix.ToDICOM()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 200
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DICOMObject ToDICOM()
    content.vb: Public Function ToDICOM As DICOMObject
    return:
      type: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.RT.DoseMatrix.Save(System.String)
  id: Save(System.String)
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: Save(String)
  fullName: EvilDICOM.RT.DoseMatrix.Save(System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 232
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public void Save(string path)
    content.vb: Public Sub Save(path As String)
    parameters:
    - id: path
      type: System.String
- uid: EvilDICOM.RT.DoseMatrix.Scaling
  id: Scaling
  parent: EvilDICOM.RT.DoseMatrix
  langs:
  - csharp
  - vb
  name: Scaling
  fullName: EvilDICOM.RT.DoseMatrix.Scaling
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/RT/DoseMatrix.cs
    startLine: 237
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Scaling { get; set; }
    content.vb: Public Property Scaling As Double
    parameters: []
    return:
      type: System.Double
references:
- uid: EvilDICOM.RT
  isExternal: false
  name: EvilDICOM.RT
  fullName: EvilDICOM.RT
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  fullname.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: true
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: EvilDICOM.RT.DoseMatrix
  parent: EvilDICOM.RT
  isExternal: false
  name: DoseMatrix
  fullName: EvilDICOM.RT.DoseMatrix
- uid: EvilDICOM.Core.DICOMObject
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMObject
  fullName: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: EvilDICOM.Core.Helpers.Vector3
  parent: EvilDICOM.Core.Helpers
  isExternal: false
  name: Vector3
  fullName: EvilDICOM.Core.Helpers.Vector3
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  fullName: System.Double
- uid: System.Collections.Generic.List{EvilDICOM.RT.DoseValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DoseValue>
  fullName: System.Collections.Generic.List<EvilDICOM.RT.DoseValue>
  fullname.vb: System.Collections.Generic.List(Of EvilDICOM.RT.DoseValue)
  name.vb: List(Of DoseValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - uid: EvilDICOM.RT.DoseValue
    name: DoseValue
    fullName: EvilDICOM.RT.DoseValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.RT.DoseValue
    name: DoseValue
    fullName: EvilDICOM.RT.DoseValue
  - name: )
    fullName: )
- uid: EvilDICOM.Core.Helpers
  isExternal: false
  name: EvilDICOM.Core.Helpers
  fullName: EvilDICOM.Core.Helpers
- uid: EvilDICOM.RT.DoseValue
  parent: EvilDICOM.RT
  isExternal: false
  name: DoseValue
  fullName: EvilDICOM.RT.DoseValue
- uid: System.Double[]
  isExternal: true
  name: Double[]
  fullName: System.Double[]
  fullname.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    fullName: ()
