### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.Querying.QueryBuilder
  commentId: T:EvilDICOM.Network.Querying.QueryBuilder
  id: QueryBuilder
  parent: EvilDICOM.Network.Querying
  children:
  - EvilDICOM.Network.Querying.QueryBuilder.#ctor(EvilDICOM.Network.DICOMSCU,EvilDICOM.Network.Entity)
  - EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  - EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  - EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  - EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  - EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  - EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD})
  - EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids(System.String)
  - EvilDICOM.Network.Querying.QueryBuilder.SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16@)
  - EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16)
  langs:
  - csharp
  - vb
  name: QueryBuilder
  nameWithType: QueryBuilder
  fullName: EvilDICOM.Network.Querying.QueryBuilder
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: QueryBuilder
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 18
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  summary: "\nA class to help with CFind and CMove operations\n"
  example: []
  syntax:
    content: 'public class QueryBuilder : object'
    content.vb: >-
      Public Class QueryBuilder
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Network.Querying.QueryBuilder.#ctor(EvilDICOM.Network.DICOMSCU,EvilDICOM.Network.Entity)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.#ctor(EvilDICOM.Network.DICOMSCU,EvilDICOM.Network.Entity)
  id: '#ctor(EvilDICOM.Network.DICOMSCU,EvilDICOM.Network.Entity)'
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: QueryBuilder(DICOMSCU, Entity)
  nameWithType: QueryBuilder.QueryBuilder(DICOMSCU, Entity)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.QueryBuilder(EvilDICOM.Network.DICOMSCU, EvilDICOM.Network.Entity)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 28
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  summary: "\nA Query builder constructor which requires a SCU and SCP entity\n"
  example: []
  syntax:
    content: public QueryBuilder(DICOMSCU scu, Entity scp)
    parameters:
    - id: scu
      type: EvilDICOM.Network.DICOMSCU
      description: The SCU client which will perform the operations and queries
    - id: scp
      type: EvilDICOM.Network.Entity
      description: the SCP which will send the results
    content.vb: Public Sub New(scu As DICOMSCU, scp As Entity)
  overload: EvilDICOM.Network.Querying.QueryBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids(System.String)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids(System.String)
  id: GetStudyUids(System.String)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetStudyUids(String)
  nameWithType: QueryBuilder.GetStudyUids(String)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids(System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetStudyUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 34
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: public IEnumerable<CFindStudyIOD> GetStudyUids(string patientId)
    parameters:
    - id: patientId
      type: System.String
    return:
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD}
    content.vb: Public Function GetStudyUids(patientId As String) As IEnumerable(Of CFindStudyIOD)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD})
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD})
  id: GetSeriesUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD})
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetSeriesUids(IEnumerable<CFindStudyIOD>)
  nameWithType: QueryBuilder.GetSeriesUids(IEnumerable<CFindStudyIOD>)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetSeriesUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 43
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: public IEnumerable<CFindSeriesIOD> GetSeriesUids(IEnumerable<CFindStudyIOD> studies)
    parameters:
    - id: studies
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD}
    return:
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}
    content.vb: Public Function GetSeriesUids(studies As IEnumerable(Of CFindStudyIOD)) As IEnumerable(Of CFindSeriesIOD)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids*
  nameWithType.vb: QueryBuilder.GetSeriesUids(IEnumerable(Of CFindStudyIOD))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD))
  name.vb: GetSeriesUids(IEnumerable(Of CFindStudyIOD))
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  id: GetSeriesUids(EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetSeriesUids(CFindStudyIOD)
  nameWithType: QueryBuilder.GetSeriesUids(CFindStudyIOD)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids(EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetSeriesUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 59
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: public IEnumerable<CFindSeriesIOD> GetSeriesUids(CFindStudyIOD study)
    parameters:
    - id: study
      type: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
    return:
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}
    content.vb: Public Function GetSeriesUids(study As CFindStudyIOD) As IEnumerable(Of CFindSeriesIOD)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  id: GetImageUids(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetImageUids(IEnumerable<CFindSeriesIOD>)
  nameWithType: QueryBuilder.GetImageUids(IEnumerable<CFindSeriesIOD>)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetImageUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 64
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: public IEnumerable<CFindImageIOD> GetImageUids(IEnumerable<CFindSeriesIOD> series)
    parameters:
    - id: series
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}
    return:
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindImageIOD}
    content.vb: Public Function GetImageUids(series As IEnumerable(Of CFindSeriesIOD)) As IEnumerable(Of CFindImageIOD)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids*
  nameWithType.vb: QueryBuilder.GetImageUids(IEnumerable(Of CFindSeriesIOD))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD))
  name.vb: GetImageUids(IEnumerable(Of CFindSeriesIOD))
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  id: GetImageUids(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetImageUids(CFindSeriesIOD)
  nameWithType: QueryBuilder.GetImageUids(CFindSeriesIOD)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetImageUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 81
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: public IEnumerable<CFindImageIOD> GetImageUids(CFindSeriesIOD series)
    parameters:
    - id: series
      type: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
    return:
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindImageIOD}
    content.vb: Public Function GetImageUids(series As CFindSeriesIOD) As IEnumerable(Of CFindImageIOD)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  id: GetImageUids``1(IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD})
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetImageUids<T>(IEnumerable<CFindSeriesIOD>)
  nameWithType: QueryBuilder.GetImageUids<T>(IEnumerable<CFindSeriesIOD>)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids<T>(IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetImageUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 86
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: 'public IEnumerable<T> GetImageUids<T>(IEnumerable<CFindSeriesIOD> series)where T : CFindImageIOD'
    parameters:
    - id: series
      type: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
    content.vb: Public Function GetImageUids(Of T As CFindImageIOD)(series As IEnumerable(Of CFindSeriesIOD)) As IEnumerable(Of T)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids*
  nameWithType.vb: QueryBuilder.GetImageUids(Of T)(IEnumerable(Of CFindSeriesIOD))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(Of T)(IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD))
  name.vb: GetImageUids(Of T)(IEnumerable(Of CFindSeriesIOD))
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.GetImageUids``1(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  id: GetImageUids``1(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: GetImageUids<T>(CFindSeriesIOD)
  nameWithType: QueryBuilder.GetImageUids<T>(CFindSeriesIOD)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids<T>(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetImageUids
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 103
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  syntax:
    content: 'public IEnumerable<T> GetImageUids<T>(CFindSeriesIOD series)where T : CFindImageIOD'
    parameters:
    - id: series
      type: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
    content.vb: Public Function GetImageUids(Of T As CFindImageIOD)(series As CFindSeriesIOD) As IEnumerable(Of T)
  overload: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids*
  nameWithType.vb: QueryBuilder.GetImageUids(Of T)(CFindSeriesIOD)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids(Of T)(EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  name.vb: GetImageUids(Of T)(CFindSeriesIOD)
- uid: EvilDICOM.Network.Querying.QueryBuilder.SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16@)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16@)
  id: SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16@)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: SendImage(CFindImageIOD, String, ref UInt16)
  nameWithType: QueryBuilder.SendImage(CFindImageIOD, String, ref UInt16)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD, System.String, ref System.UInt16)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SendImage
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 115
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  summary: "\nInstructs a C-MOVE operation for an image from the SCP of the QueryBuilder to the input AETitle\n"
  example: []
  syntax:
    content: public CMoveResponse SendImage(CFindImageIOD ir, string receivingAETitle, ref ushort msgId)
    parameters:
    - id: ir
      type: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
      description: the C Find iod of the a query (get ImageUids())
    - id: receivingAETitle
      type: System.String
      description: the AE title to send the image to (from the SCP of this query builder)
    - id: msgId
      type: System.UInt16
      description: the message id for this image. It will be incremented for looping operations within this method
    return:
      type: EvilDICOM.Network.DIMSE.CMoveResponse
      description: a C-MOVE response for this operation
    content.vb: Public Function SendImage(ir As CFindImageIOD, receivingAETitle As String, ByRef msgId As UShort) As CMoveResponse
  overload: EvilDICOM.Network.Querying.QueryBuilder.SendImage*
  nameWithType.vb: QueryBuilder.SendImage(CFindImageIOD, String, ByRef UInt16)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Network.Querying.QueryBuilder.SendImage(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD, System.String, ByRef System.UInt16)
  name.vb: SendImage(CFindImageIOD, String, ByRef UInt16)
- uid: EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16)
  commentId: M:EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16)
  id: SendImageAsync(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD,System.String,System.UInt16)
  parent: EvilDICOM.Network.Querying.QueryBuilder
  langs:
  - csharp
  - vb
  name: SendImageAsync(CFindImageIOD, String, UInt16)
  nameWithType: QueryBuilder.SendImageAsync(CFindImageIOD, String, UInt16)
  fullName: EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync(EvilDICOM.Network.DIMSE.IOD.CFindImageIOD, System.String, System.UInt16)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SendImageAsync
    path: ../EvilDICOM/EvilDICOM/Network/Querying/QueryBuilder.cs
    startLine: 128
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Querying
  summary: "\nInstructs a C-MOVE operation for an image from the SCP of the QueryBuilder to the input AETitle\n"
  example: []
  syntax:
    content: public Task<CMoveResponse> SendImageAsync(CFindImageIOD ir, string receivingAETitle, ushort msgId)
    parameters:
    - id: ir
      type: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
      description: the C Find iod of the a query (get ImageUids())
    - id: receivingAETitle
      type: System.String
      description: the AE title to send the image to (from the SCP of this query builder)
    - id: msgId
      type: System.UInt16
      description: the message id for this image. It will NOT be incremented for looping operations within this method
    return:
      type: Task{EvilDICOM.Network.DIMSE.CMoveResponse}
      description: a C-MOVE response for this operation
    content.vb: Public Function SendImageAsync(ir As CFindImageIOD, receivingAETitle As String, msgId As UShort) As Task(Of CMoveResponse)
  overload: EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EvilDICOM.Network.Querying
  commentId: N:EvilDICOM.Network.Querying
  isExternal: false
  name: EvilDICOM.Network.Querying
  nameWithType: EvilDICOM.Network.Querying
  fullName: EvilDICOM.Network.Querying
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Network.Querying.QueryBuilder.#ctor*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.#ctor
  isExternal: false
  name: QueryBuilder
  nameWithType: QueryBuilder.QueryBuilder
  fullName: EvilDICOM.Network.Querying.QueryBuilder.QueryBuilder
- uid: EvilDICOM.Network.DICOMSCU
  commentId: T:EvilDICOM.Network.DICOMSCU
  parent: EvilDICOM.Network
  isExternal: false
  name: DICOMSCU
  nameWithType: DICOMSCU
  fullName: EvilDICOM.Network.DICOMSCU
- uid: EvilDICOM.Network.Entity
  commentId: T:EvilDICOM.Network.Entity
  parent: EvilDICOM.Network
  isExternal: false
  name: Entity
  nameWithType: Entity
  fullName: EvilDICOM.Network.Entity
- uid: EvilDICOM.Network
  commentId: N:EvilDICOM.Network
  isExternal: false
  name: EvilDICOM.Network
  nameWithType: EvilDICOM.Network
  fullName: EvilDICOM.Network
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids
  isExternal: false
  name: GetStudyUids
  nameWithType: QueryBuilder.GetStudyUids
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetStudyUids
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD}
  commentId: '!:IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD}'
  definition: IEnumerable`1
  name: IEnumerable<CFindStudyIOD>
  nameWithType: IEnumerable<CFindStudyIOD>
  fullName: IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD>
  nameWithType.vb: IEnumerable(Of CFindStudyIOD)
  fullName.vb: IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD)
  name.vb: IEnumerable(Of CFindStudyIOD)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
    name: CFindStudyIOD
    nameWithType: CFindStudyIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
    name: CFindStudyIOD
    nameWithType: CFindStudyIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids
  isExternal: false
  name: GetSeriesUids
  nameWithType: QueryBuilder.GetSeriesUids
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetSeriesUids
- uid: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}
  commentId: '!:IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD}'
  definition: IEnumerable`1
  name: IEnumerable<CFindSeriesIOD>
  nameWithType: IEnumerable<CFindSeriesIOD>
  fullName: IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD>
  nameWithType.vb: IEnumerable(Of CFindSeriesIOD)
  fullName.vb: IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD)
  name.vb: IEnumerable(Of CFindSeriesIOD)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
    name: CFindSeriesIOD
    nameWithType: CFindSeriesIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
    name: CFindSeriesIOD
    nameWithType: CFindSeriesIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
  commentId: T:EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
  parent: EvilDICOM.Network.DIMSE.IOD
  isExternal: false
  name: CFindStudyIOD
  nameWithType: CFindStudyIOD
  fullName: EvilDICOM.Network.DIMSE.IOD.CFindStudyIOD
- uid: EvilDICOM.Network.DIMSE.IOD
  commentId: N:EvilDICOM.Network.DIMSE.IOD
  isExternal: false
  name: EvilDICOM.Network.DIMSE.IOD
  nameWithType: EvilDICOM.Network.DIMSE.IOD
  fullName: EvilDICOM.Network.DIMSE.IOD
- uid: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.GetImageUids
  isExternal: false
  name: GetImageUids
  nameWithType: QueryBuilder.GetImageUids
  fullName: EvilDICOM.Network.Querying.QueryBuilder.GetImageUids
- uid: IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindImageIOD}
  commentId: '!:IEnumerable{EvilDICOM.Network.DIMSE.IOD.CFindImageIOD}'
  definition: IEnumerable`1
  name: IEnumerable<CFindImageIOD>
  nameWithType: IEnumerable<CFindImageIOD>
  fullName: IEnumerable<EvilDICOM.Network.DIMSE.IOD.CFindImageIOD>
  nameWithType.vb: IEnumerable(Of CFindImageIOD)
  fullName.vb: IEnumerable(Of EvilDICOM.Network.DIMSE.IOD.CFindImageIOD)
  name.vb: IEnumerable(Of CFindImageIOD)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
    name: CFindImageIOD
    nameWithType: CFindImageIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
    name: CFindImageIOD
    nameWithType: CFindImageIOD
    fullName: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
  commentId: T:EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
  parent: EvilDICOM.Network.DIMSE.IOD
  isExternal: false
  name: CFindSeriesIOD
  nameWithType: CFindSeriesIOD
  fullName: EvilDICOM.Network.DIMSE.IOD.CFindSeriesIOD
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Network.Querying.QueryBuilder.SendImage*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.SendImage
  isExternal: false
  name: SendImage
  nameWithType: QueryBuilder.SendImage
  fullName: EvilDICOM.Network.Querying.QueryBuilder.SendImage
- uid: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
  commentId: T:EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
  parent: EvilDICOM.Network.DIMSE.IOD
  isExternal: false
  name: CFindImageIOD
  nameWithType: CFindImageIOD
  fullName: EvilDICOM.Network.DIMSE.IOD.CFindImageIOD
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: EvilDICOM.Network.DIMSE.CMoveResponse
  commentId: T:EvilDICOM.Network.DIMSE.CMoveResponse
  parent: EvilDICOM.Network.DIMSE
  isExternal: false
  name: CMoveResponse
  nameWithType: CMoveResponse
  fullName: EvilDICOM.Network.DIMSE.CMoveResponse
- uid: EvilDICOM.Network.DIMSE
  commentId: N:EvilDICOM.Network.DIMSE
  isExternal: false
  name: EvilDICOM.Network.DIMSE
  nameWithType: EvilDICOM.Network.DIMSE
  fullName: EvilDICOM.Network.DIMSE
- uid: EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync*
  commentId: Overload:EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync
  isExternal: false
  name: SendImageAsync
  nameWithType: QueryBuilder.SendImageAsync
  fullName: EvilDICOM.Network.Querying.QueryBuilder.SendImageAsync
- uid: Task{EvilDICOM.Network.DIMSE.CMoveResponse}
  commentId: '!:Task{EvilDICOM.Network.DIMSE.CMoveResponse}'
  definition: Task`1
  name: Task<CMoveResponse>
  nameWithType: Task<CMoveResponse>
  fullName: Task<EvilDICOM.Network.DIMSE.CMoveResponse>
  nameWithType.vb: Task(Of CMoveResponse)
  fullName.vb: Task(Of EvilDICOM.Network.DIMSE.CMoveResponse)
  name.vb: Task(Of CMoveResponse)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Network.DIMSE.CMoveResponse
    name: CMoveResponse
    nameWithType: CMoveResponse
    fullName: EvilDICOM.Network.DIMSE.CMoveResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Network.DIMSE.CMoveResponse
    name: CMoveResponse
    nameWithType: CMoveResponse
    fullName: EvilDICOM.Network.DIMSE.CMoveResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
