items:
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  id: DICOMBinaryReader
  parent: EvilDICOM.Core.IO.Reading
  children:
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor(System.Byte[])
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor(System.String)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader._binaryReader
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Dispose
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.GetSubStream(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.IndexOf(System.Byte[])
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Peek(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Byte[],System.Int32,System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadChars(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadString(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Reset
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Skip(System.Int32)
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamLength
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamPosition
  - EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Take(System.Int32)
  langs:
  - csharp
  - vb
  name: DICOMBinaryReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: A wrapper for the Binary Reader class that is specific to DICOM.
  example: []
  syntax:
    content: 'public class DICOMBinaryReader : IDisposable'
    content.vb: Public Class DICOMBinaryReader Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader._binaryReader
  id: _binaryReader
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: _binaryReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader._binaryReader
  type: Field
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: protected BinaryReader _binaryReader
    content.vb: Protected _binaryReader As BinaryReader
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: DICOMBinaryReader()
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.DICOMBinaryReader()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: protected DICOMBinaryReader()
    content.vb: Protected Sub New
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: DICOMBinaryReader(String)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.DICOMBinaryReader(System.String)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Constructs a new reader from a file path.
  example: []
  syntax:
    content: public DICOMBinaryReader(string filePath)
    content.vb: Public Sub New(filePath As String)
    parameters:
    - id: filePath
      type: System.String
      description: path to the file to be read
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: DICOMBinaryReader(Byte[])
  name.vb: DICOMBinaryReader(Byte())
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.DICOMBinaryReader(System.Byte[])
  fullName.vb: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.DICOMBinaryReader(System.Byte())
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 38
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Constructs a new reader from a byte array.
  example: []
  syntax:
    content: public DICOMBinaryReader(byte[] byteStream)
    content.vb: Public Sub New(byteStream As Byte())
    parameters:
    - id: byteStream
      type: System.Byte[]
      description: the byte array to be read
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamPosition
  id: StreamPosition
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: StreamPosition
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamPosition
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 47
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Returns the current position of the byte stream
  example: []
  syntax:
    content: public long StreamPosition { get; set; }
    content.vb: Public Property StreamPosition As Long
    parameters: []
    return:
      type: System.Int64
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamLength
  id: StreamLength
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: StreamLength
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.StreamLength
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 56
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Returnts the length of the byte stream
  example: []
  syntax:
    content: public long StreamLength { get; }
    content.vb: Public ReadOnly Property StreamLength As Long
    parameters: []
    return:
      type: System.Int64
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Dispose
  id: Dispose
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Dispose()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 61
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Int32)
  id: ReadBytes(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: ReadBytes(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 71
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Reads the specified number of bytes
  example: []
  syntax:
    content: public virtual byte[] ReadBytes(int count)
    content.vb: Public Overridable Function ReadBytes(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
      description: the number of bytes to be read
    return:
      type: System.Byte[]
      description: the read bytes
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Take(System.Int32)
  id: Take(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: Take(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Take(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 89
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Reads the specified number of bytes (shorthand for ReadBytes method).
  example: []
  syntax:
    content: public virtual byte[] Take(int count)
    content.vb: Public Overridable Function Take(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
      description: the number of bytes to be read
    return:
      type: System.Byte[]
      description: the read bytes
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Peek(System.Int32)
  id: Peek(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: Peek(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Peek(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 94
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public virtual byte[] Peek(int count)
    content.vb: Public Overridable Function Peek(count As Integer) As Byte()
    parameters:
    - id: count
      type: System.Int32
    return:
      type: System.Byte[]
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.GetSubStream(System.Int32)
  id: GetSubStream(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: GetSubStream(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.GetSubStream(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 109
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Creates a new stream that is trimmed to the specification length.
  example: []
  syntax:
    content: public virtual DICOMBinaryReader GetSubStream(int substreamLength)
    content.vb: Public Overridable Function GetSubStream(substreamLength As Integer) As DICOMBinaryReader
    parameters:
    - id: substreamLength
      type: System.Int32
      description: the number of bytes to include in the new stream (starting from the current position)
    return:
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadChars(System.Int32)
  id: ReadChars(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: ReadChars(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadChars(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 120
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Reads the specified number of chars
  example: []
  syntax:
    content: public virtual char[] ReadChars(int count)
    content.vb: Public Overridable Function ReadChars(count As Integer) As Char()
    parameters:
    - id: count
      type: System.Int32
      description: the number of chars to be read
    return:
      type: System.Char[]
      description: the read chars
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadString(System.Int32)
  id: ReadString(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: ReadString(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadString(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 138
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Reads the specified number of chars and converts to a string
  example: []
  syntax:
    content: public virtual string ReadString(int length)
    content.vb: Public Overridable Function ReadString(length As Integer) As String
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.String
      description: the read chars
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Byte[],System.Int32,System.Int32)
  id: ReadBytes(System.Byte[],System.Int32,System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: ReadBytes(Byte[], Int32, Int32)
  name.vb: ReadBytes(Byte(), Int32, Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Byte[], System.Int32, System.Int32)
  fullName.vb: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.ReadBytes(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 143
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public int ReadBytes(byte[] buffer, int index, int count)
    content.vb: Public Function ReadBytes(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Skip(System.Int32)
  id: Skip(System.Int32)
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: Skip(Int32)
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Skip(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 148
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public virtual DICOMBinaryReader Skip(int count)
    content.vb: Public Overridable Function Skip(count As Integer) As DICOMBinaryReader
    parameters:
    - id: count
      type: System.Int32
    return:
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.IndexOf(System.Byte[])
  id: IndexOf(System.Byte[])
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: IndexOf(Byte[])
  name.vb: IndexOf(Byte())
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.IndexOf(System.Byte[])
  fullName.vb: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.IndexOf(System.Byte())
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 166
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: Will return the index of a given byte pattern in the byte stream
  example: []
  syntax:
    content: public long IndexOf(byte[] bytePattern)
    content.vb: Public Function IndexOf(bytePattern As Byte()) As Long
    parameters:
    - id: bytePattern
      type: System.Byte[]
      description: the pattern to be found
    return:
      type: System.Int64
      description: the index of the pattern
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Reset
  id: Reset
  parent: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader.Reset()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMBinaryReader.cs
    startLine: 185
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
references:
- uid: EvilDICOM.Core.IO.Reading
  isExternal: false
  name: EvilDICOM.Core.IO.Reading
  fullName: EvilDICOM.Core.IO.Reading
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  parent: EvilDICOM.Core.IO.Reading
  isExternal: false
  name: DICOMBinaryReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
