items:
- uid: EvilDICOM.Core.IO.Data.MultiplicityComposer
  id: MultiplicityComposer
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.MultiplicityComposer.ComposeMultipleBinary``1(EvilDICOM.Core.DICOMData{``0},System.Func{``0,System.Byte[]})
  langs:
  - csharp
  - vb
  name: MultiplicityComposer
  fullName: EvilDICOM.Core.IO.Data.MultiplicityComposer
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityComposer.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityComposer.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public class MultiplicityComposer
    content.vb: Public Class MultiplicityComposer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Core.IO.Data.MultiplicityComposer.ComposeMultipleBinary``1(EvilDICOM.Core.DICOMData{``0},System.Func{``0,System.Byte[]})
  id: ComposeMultipleBinary``1(EvilDICOM.Core.DICOMData{``0},System.Func{``0,System.Byte[]})
  parent: EvilDICOM.Core.IO.Data.MultiplicityComposer
  langs:
  - csharp
  - vb
  name: ComposeMultipleBinary<T>(DICOMData<T>, Func<T, Byte[]>)
  name.vb: ComposeMultipleBinary(Of T)(DICOMData(Of T), Func(Of T, Byte()))
  fullName: EvilDICOM.Core.IO.Data.MultiplicityComposer.ComposeMultipleBinary<T>(EvilDICOM.Core.DICOMData<T>, System.Func<T, System.Byte[]>)
  fullName.vb: EvilDICOM.Core.IO.Data.MultiplicityComposer.ComposeMultipleBinary(Of T)(EvilDICOM.Core.DICOMData(Of T), System.Func(Of T, System.Byte()))
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityComposer.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Core/IO/Data/MultiplicityComposer.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  summary: Writes the multiple binary data objects as one string of bytes
  example: []
  syntax:
    content: public static byte[] ComposeMultipleBinary<T>(DICOMData<T> data, Func<T, byte[]> writeSingleFunc)
    content.vb: Public Shared Function ComposeMultipleBinary(Of T)(data As DICOMData(Of T), writeSingleFunc As Func(Of T, Byte())) As Byte()
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{{T}}
      description: the data to be converted to binary
    - id: writeSingleFunc
      type: System.Func{{T},System.Byte[]}
      description: the function that can convert a single data item into bytes
    typeParameters:
    - id: T
      description: the type of data
    return:
      type: System.Byte[]
      description: the concated array of bytes that contains all data items
references:
- uid: EvilDICOM.Core.IO.Data
  isExternal: false
  name: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: EvilDICOM.Core.DICOMData{{T}}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  fullname.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{T},System.Byte[]}
  parent: System
  definition: System.Func`2
  name: Func<T, Byte[]>
  fullName: System.Func<T, System.Byte[]>
  fullname.vb: System.Func(Of T, System.Byte())
  name.vb: Func(Of T, Byte())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: EvilDICOM.Core.DICOMData`1
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  fullname.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
