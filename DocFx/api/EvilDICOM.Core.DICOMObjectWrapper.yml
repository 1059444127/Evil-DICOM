### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.DICOMObjectWrapper
  commentId: T:EvilDICOM.Core.DICOMObjectWrapper
  id: DICOMObjectWrapper
  parent: EvilDICOM.Core
  children:
  - EvilDICOM.Core.DICOMObjectWrapper.#ctor
  - EvilDICOM.Core.DICOMObjectWrapper.#ctor(EvilDICOM.Core.DICOMObject)
  - EvilDICOM.Core.DICOMObjectWrapper._dcm
  - EvilDICOM.Core.DICOMObjectWrapper.GetValue``1(EvilDICOM.Core.Element.Tag)
  - EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence``1(EvilDICOM.Core.Element.Tag)
  - EvilDICOM.Core.DICOMObjectWrapper.SetValue``1(EvilDICOM.Core.Element.Tag,``0)
  - EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence``1(EvilDICOM.Core.Element.Tag,List{``0})
  langs:
  - csharp
  - vb
  name: DICOMObjectWrapper
  nameWithType: DICOMObjectWrapper
  fullName: EvilDICOM.Core.DICOMObjectWrapper
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DICOMObjectWrapper
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 6
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: 'public abstract class DICOMObjectWrapper : object'
    content.vb: >-
      Public MustInherit Class DICOMObjectWrapper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EvilDICOM.Core.DICOMObjectWrapper._dcm
  commentId: F:EvilDICOM.Core.DICOMObjectWrapper._dcm
  id: _dcm
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: _dcm
  nameWithType: DICOMObjectWrapper._dcm
  fullName: EvilDICOM.Core.DICOMObjectWrapper._dcm
  type: Field
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: _dcm
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: protected DICOMObject _dcm
    return:
      type: EvilDICOM.Core.DICOMObject
    content.vb: Protected _dcm As DICOMObject
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: EvilDICOM.Core.DICOMObjectWrapper.#ctor
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: DICOMObjectWrapper()
  nameWithType: DICOMObjectWrapper.DICOMObjectWrapper()
  fullName: EvilDICOM.Core.DICOMObjectWrapper.DICOMObjectWrapper()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: public DICOMObjectWrapper()
    content.vb: Public Sub New
  overload: EvilDICOM.Core.DICOMObjectWrapper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.DICOMObjectWrapper.#ctor(EvilDICOM.Core.DICOMObject)
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.#ctor(EvilDICOM.Core.DICOMObject)
  id: '#ctor(EvilDICOM.Core.DICOMObject)'
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: DICOMObjectWrapper(DICOMObject)
  nameWithType: DICOMObjectWrapper.DICOMObjectWrapper(DICOMObject)
  fullName: EvilDICOM.Core.DICOMObjectWrapper.DICOMObjectWrapper(EvilDICOM.Core.DICOMObject)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: public DICOMObjectWrapper(DICOMObject dicom)
    parameters:
    - id: dicom
      type: EvilDICOM.Core.DICOMObject
    content.vb: Public Sub New(dicom As DICOMObject)
  overload: EvilDICOM.Core.DICOMObjectWrapper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.DICOMObjectWrapper.GetValue``1(EvilDICOM.Core.Element.Tag)
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.GetValue``1(EvilDICOM.Core.Element.Tag)
  id: GetValue``1(EvilDICOM.Core.Element.Tag)
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: GetValue<T>(Tag)
  nameWithType: DICOMObjectWrapper.GetValue<T>(Tag)
  fullName: EvilDICOM.Core.DICOMObjectWrapper.GetValue<T>(EvilDICOM.Core.Element.Tag)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetValue
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: public DICOMData<T> GetValue<T>(Tag tag)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
    typeParameters:
    - id: T
    return:
      type: EvilDICOM.Core.DICOMData{{T}}
    content.vb: Public Function GetValue(Of T)(tag As Tag) As DICOMData(Of T)
  overload: EvilDICOM.Core.DICOMObjectWrapper.GetValue*
  nameWithType.vb: DICOMObjectWrapper.GetValue(Of T)(Tag)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMObjectWrapper.GetValue(Of T)(EvilDICOM.Core.Element.Tag)
  name.vb: GetValue(Of T)(Tag)
- uid: EvilDICOM.Core.DICOMObjectWrapper.SetValue``1(EvilDICOM.Core.Element.Tag,``0)
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.SetValue``1(EvilDICOM.Core.Element.Tag,``0)
  id: SetValue``1(EvilDICOM.Core.Element.Tag,``0)
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: SetValue<T>(Tag, T)
  nameWithType: DICOMObjectWrapper.SetValue<T>(Tag, T)
  fullName: EvilDICOM.Core.DICOMObjectWrapper.SetValue<T>(EvilDICOM.Core.Element.Tag, T)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SetValue
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: public void SetValue<T>(Tag tag, T value)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Sub SetValue(Of T)(tag As Tag, value As T)
  overload: EvilDICOM.Core.DICOMObjectWrapper.SetValue*
  nameWithType.vb: DICOMObjectWrapper.SetValue(Of T)(Tag, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMObjectWrapper.SetValue(Of T)(EvilDICOM.Core.Element.Tag, T)
  name.vb: SetValue(Of T)(Tag, T)
- uid: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence``1(EvilDICOM.Core.Element.Tag)
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence``1(EvilDICOM.Core.Element.Tag)
  id: GetWrappedSequence``1(EvilDICOM.Core.Element.Tag)
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: GetWrappedSequence<T>(Tag)
  nameWithType: DICOMObjectWrapper.GetWrappedSequence<T>(Tag)
  fullName: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence<T>(EvilDICOM.Core.Element.Tag)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: GetWrappedSequence
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 35
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nWraps a DICOM sequence with a type that inherits from DICOMObjectWrapper\n"
  example: []
  syntax:
    content: 'public List<T> GetWrappedSequence<T>(Tag tag)where T : DICOMObjectWrapper, new ()'
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
      description: the DICOM tag of the sequence which contains the objects to wrap
    typeParameters:
    - id: T
      description: the wrapping class for the DICOM objects within the sequence
    return:
      type: List{{T}}
      description: a list of wrapped DICOM objects
    content.vb: Public Function GetWrappedSequence(Of T As {DICOMObjectWrapper, New})(tag As Tag) As List(Of T)
  overload: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence*
  nameWithType.vb: DICOMObjectWrapper.GetWrappedSequence(Of T)(Tag)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence(Of T)(EvilDICOM.Core.Element.Tag)
  name.vb: GetWrappedSequence(Of T)(Tag)
- uid: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence``1(EvilDICOM.Core.Element.Tag,List{``0})
  commentId: M:EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence``1(EvilDICOM.Core.Element.Tag,List{``0})
  id: SetWrappedSequence``1(EvilDICOM.Core.Element.Tag,List{``0})
  parent: EvilDICOM.Core.DICOMObjectWrapper
  langs:
  - csharp
  - vb
  name: SetWrappedSequence<T>(Tag, List<T>)
  nameWithType: DICOMObjectWrapper.SetWrappedSequence<T>(Tag, List<T>)
  fullName: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence<T>(EvilDICOM.Core.Element.Tag, List<T>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SetWrappedSequence
    path: ../EvilDICOM/EvilDICOM/Core/DICOMObjectWrapper.cs
    startLine: 55
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nExtracts the DICOMObjects out of a list of DICOMObjectWrappers and sets these as the new values in the sequence\n"
  example: []
  syntax:
    content: 'public void SetWrappedSequence<T>(Tag tag, List<T> value)where T : DICOMObjectWrapper'
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
      description: the DICOM tag of the sequence where to place the newly extracted objects
    - id: value
      type: List{{T}}
      description: the list of wrapped DICOMObjects to go in the sequence
    typeParameters:
    - id: T
    content.vb: Public Sub SetWrappedSequence(Of T As DICOMObjectWrapper)(tag As Tag, value As List(Of T))
  overload: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence*
  nameWithType.vb: DICOMObjectWrapper.SetWrappedSequence(Of T)(Tag, List(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence(Of T)(EvilDICOM.Core.Element.Tag, List(Of T))
  name.vb: SetWrappedSequence(Of T)(Tag, List(Of T))
references:
- uid: EvilDICOM.Core
  commentId: N:EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  nameWithType: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.DICOMObject
  commentId: T:EvilDICOM.Core.DICOMObject
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMObject
  nameWithType: DICOMObject
  fullName: EvilDICOM.Core.DICOMObject
- uid: EvilDICOM.Core.DICOMObjectWrapper.#ctor*
  commentId: Overload:EvilDICOM.Core.DICOMObjectWrapper.#ctor
  isExternal: false
  name: DICOMObjectWrapper
  nameWithType: DICOMObjectWrapper.DICOMObjectWrapper
  fullName: EvilDICOM.Core.DICOMObjectWrapper.DICOMObjectWrapper
- uid: EvilDICOM.Core.DICOMObjectWrapper.GetValue*
  commentId: Overload:EvilDICOM.Core.DICOMObjectWrapper.GetValue
  isExternal: false
  name: GetValue
  nameWithType: DICOMObjectWrapper.GetValue
  fullName: EvilDICOM.Core.DICOMObjectWrapper.GetValue
- uid: EvilDICOM.Core.Element.Tag
  commentId: T:EvilDICOM.Core.Element.Tag
  parent: EvilDICOM.Core.Element
  isExternal: false
  name: Tag
  nameWithType: Tag
  fullName: EvilDICOM.Core.Element.Tag
- uid: EvilDICOM.Core.DICOMData{{T}}
  commentId: T:EvilDICOM.Core.DICOMData{``0}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<T>
  nameWithType: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  nameWithType.vb: DICOMData(Of T)
  fullName.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Element
  commentId: N:EvilDICOM.Core.Element
  isExternal: false
  name: EvilDICOM.Core.Element
  nameWithType: EvilDICOM.Core.Element
  fullName: EvilDICOM.Core.Element
- uid: EvilDICOM.Core.DICOMData`1
  commentId: T:EvilDICOM.Core.DICOMData`1
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMData<T>
  nameWithType: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  nameWithType.vb: DICOMData(Of T)
  fullName.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.DICOMObjectWrapper.SetValue*
  commentId: Overload:EvilDICOM.Core.DICOMObjectWrapper.SetValue
  isExternal: false
  name: SetValue
  nameWithType: DICOMObjectWrapper.SetValue
  fullName: EvilDICOM.Core.DICOMObjectWrapper.SetValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence*
  commentId: Overload:EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence
  isExternal: false
  name: GetWrappedSequence
  nameWithType: DICOMObjectWrapper.GetWrappedSequence
  fullName: EvilDICOM.Core.DICOMObjectWrapper.GetWrappedSequence
- uid: List{{T}}
  commentId: '!:List{`0}'
  definition: List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence*
  commentId: Overload:EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence
  isExternal: false
  name: SetWrappedSequence
  nameWithType: DICOMObjectWrapper.SetWrappedSequence
  fullName: EvilDICOM.Core.DICOMObjectWrapper.SetWrappedSequence
