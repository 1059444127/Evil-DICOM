### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Selection.ListExtensions
  commentId: T:EvilDICOM.Core.Selection.ListExtensions
  id: ListExtensions
  parent: EvilDICOM.Core.Selection
  children:
  - EvilDICOM.Core.Selection.ListExtensions.FindAll``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  - EvilDICOM.Core.Selection.ListExtensions.FindFirst``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  langs:
  - csharp
  - vb
  name: ListExtensions
  nameWithType: ListExtensions
  fullName: EvilDICOM.Core.Selection.ListExtensions
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ListExtensions
    path: ../EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Selection
  syntax:
    content: 'public static class ListExtensions : object'
    content.vb: >-
      Public Module ListExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EvilDICOM.Core.Selection.ListExtensions.FindFirst``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  commentId: M:EvilDICOM.Core.Selection.ListExtensions.FindFirst``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  id: FindFirst``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Selection.ListExtensions
  langs:
  - csharp
  - vb
  name: FindFirst<T>(List<DICOMSelector>, String)
  nameWithType: ListExtensions.FindFirst<T>(List<DICOMSelector>, String)
  fullName: EvilDICOM.Core.Selection.ListExtensions.FindFirst<T>(List<EvilDICOM.Core.Selection.DICOMSelector>, System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: FindFirst
    path: ../EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
    startLine: 7
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Selection
  syntax:
    content: public static T FindFirst<T>(this List<DICOMSelector> items, string tagId)
    parameters:
    - id: items
      type: List{EvilDICOM.Core.Selection.DICOMSelector}
    - id: tagId
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindFirst(Of T)(items As List(Of DICOMSelector), tagId As String) As T
  overload: EvilDICOM.Core.Selection.ListExtensions.FindFirst*
  nameWithType.vb: ListExtensions.FindFirst(Of T)(List(Of DICOMSelector), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Selection.ListExtensions.FindFirst(Of T)(List(Of EvilDICOM.Core.Selection.DICOMSelector), System.String)
  name.vb: FindFirst(Of T)(List(Of DICOMSelector), String)
- uid: EvilDICOM.Core.Selection.ListExtensions.FindAll``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  commentId: M:EvilDICOM.Core.Selection.ListExtensions.FindAll``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  id: FindAll``1(List{EvilDICOM.Core.Selection.DICOMSelector},System.String)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Selection.ListExtensions
  langs:
  - csharp
  - vb
  name: FindAll<T>(List<DICOMSelector>, String)
  nameWithType: ListExtensions.FindAll<T>(List<DICOMSelector>, String)
  fullName: EvilDICOM.Core.Selection.ListExtensions.FindAll<T>(List<EvilDICOM.Core.Selection.DICOMSelector>, System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: FindAll
    path: ../EvilDICOM/EvilDICOM/Core/Selection/ListExtensions.cs
    startLine: 20
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Selection
  syntax:
    content: public static List<T> FindAll<T>(this List<DICOMSelector> items, string tagId)
    parameters:
    - id: items
      type: List{EvilDICOM.Core.Selection.DICOMSelector}
    - id: tagId
      type: System.String
    typeParameters:
    - id: T
    return:
      type: List{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindAll(Of T)(items As List(Of DICOMSelector), tagId As String) As List(Of T)
  overload: EvilDICOM.Core.Selection.ListExtensions.FindAll*
  nameWithType.vb: ListExtensions.FindAll(Of T)(List(Of DICOMSelector), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Selection.ListExtensions.FindAll(Of T)(List(Of EvilDICOM.Core.Selection.DICOMSelector), System.String)
  name.vb: FindAll(Of T)(List(Of DICOMSelector), String)
references:
- uid: EvilDICOM.Core.Selection
  commentId: N:EvilDICOM.Core.Selection
  isExternal: false
  name: EvilDICOM.Core.Selection
  nameWithType: EvilDICOM.Core.Selection
  fullName: EvilDICOM.Core.Selection
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.Selection.ListExtensions.FindFirst*
  commentId: Overload:EvilDICOM.Core.Selection.ListExtensions.FindFirst
  isExternal: false
  name: FindFirst
  nameWithType: ListExtensions.FindFirst
  fullName: EvilDICOM.Core.Selection.ListExtensions.FindFirst
- uid: List{EvilDICOM.Core.Selection.DICOMSelector}
  commentId: '!:List{EvilDICOM.Core.Selection.DICOMSelector}'
  definition: List`1
  name: List<DICOMSelector>
  nameWithType: List<DICOMSelector>
  fullName: List<EvilDICOM.Core.Selection.DICOMSelector>
  nameWithType.vb: List(Of DICOMSelector)
  fullName.vb: List(Of EvilDICOM.Core.Selection.DICOMSelector)
  name.vb: List(Of DICOMSelector)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Core.Selection.DICOMSelector
    name: DICOMSelector
    nameWithType: DICOMSelector
    fullName: EvilDICOM.Core.Selection.DICOMSelector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Core.Selection.DICOMSelector
    name: DICOMSelector
    nameWithType: DICOMSelector
    fullName: EvilDICOM.Core.Selection.DICOMSelector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: EvilDICOM.Core.Selection.ListExtensions.FindAll*
  commentId: Overload:EvilDICOM.Core.Selection.ListExtensions.FindAll
  isExternal: false
  name: FindAll
  nameWithType: ListExtensions.FindAll
  fullName: EvilDICOM.Core.Selection.ListExtensions.FindAll
- uid: List{{T}}
  commentId: '!:List{`0}'
  definition: List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
