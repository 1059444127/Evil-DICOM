### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader
  commentId: T:EvilDICOM.Core.IO.Reading.DICOMElementReader
  id: DICOMElementReader
  parent: EvilDICOM.Core.IO.Reading
  children:
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements(EvilDICOM.Core.IO.Reading.DICOMBinaryReader,EvilDICOM.Core.Enums.TransferSyntax)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  - EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  langs:
  - csharp
  - vb
  name: DICOMElementReader
  nameWithType: DICOMElementReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: DICOMElementReader
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 12
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads in DICOM elements from a DICOM object\n"
  example: []
  syntax:
    content: 'public class DICOMElementReader : object'
    content.vb: >-
      Public Class DICOMElementReader
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadElementExplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadElementExplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadElementExplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns the next DICOM element starting at the current location in the DICOM binary reader\n"
  example: []
  syntax:
    content: public static IDICOMElement ReadElementExplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: EvilDICOM.Core.Interfaces.IDICOMElement
      description: the next DICOM element
    content.vb: Public Shared Function ReadElementExplicitLittleEndian(dr As DICOMBinaryReader) As IDICOMElement
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadElementImplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadElementImplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadElementImplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 45
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns the next DICOM element starting at the current location in the DICOM binary reader\n"
  example: []
  syntax:
    content: public static IDICOMElement ReadElementImplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: EvilDICOM.Core.Interfaces.IDICOMElement
      description: the next DICOM element
    content.vb: Public Shared Function ReadElementImplicitLittleEndian(dr As DICOMBinaryReader) As IDICOMElement
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadElementExplicitBigEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadElementExplicitBigEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadElementExplicitBigEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 84
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns the next DICOM element starting at the current location in the DICOM binary reader\n"
  example: []
  syntax:
    content: public static IDICOMElement ReadElementExplicitBigEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: EvilDICOM.Core.Interfaces.IDICOMElement
      description: the next DICOM element
    content.vb: Public Shared Function ReadElementExplicitBigEndian(dr As DICOMBinaryReader) As IDICOMElement
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: SkipElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: SkipElementExplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.SkipElementExplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SkipElementExplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 95
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public static void SkipElementExplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
    content.vb: Public Shared Sub SkipElementExplicitLittleEndian(dr As DICOMBinaryReader)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: SkipElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: SkipElementImplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.SkipElementImplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SkipElementImplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 111
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public static void SkipElementImplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
    content.vb: Public Shared Sub SkipElementImplicitLittleEndian(dr As DICOMBinaryReader)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: SkipElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: SkipElementExplicitBigEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.SkipElementExplicitBigEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: SkipElementExplicitBigEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 126
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public static void SkipElementExplicitBigEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
    content.vb: Public Shared Sub SkipElementExplicitBigEndian(dr As DICOMBinaryReader)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements(EvilDICOM.Core.IO.Reading.DICOMBinaryReader,EvilDICOM.Core.Enums.TransferSyntax)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements(EvilDICOM.Core.IO.Reading.DICOMBinaryReader,EvilDICOM.Core.Enums.TransferSyntax)
  id: ReadAllElements(EvilDICOM.Core.IO.Reading.DICOMBinaryReader,EvilDICOM.Core.Enums.TransferSyntax)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadAllElements(DICOMBinaryReader, TransferSyntax)
  nameWithType: DICOMElementReader.ReadAllElements(DICOMBinaryReader, TransferSyntax)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements(EvilDICOM.Core.IO.Reading.DICOMBinaryReader, EvilDICOM.Core.Enums.TransferSyntax)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadAllElements
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 146
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  syntax:
    content: public static List<IDICOMElement> ReadAllElements(DICOMBinaryReader dr, TransferSyntax syntax)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
    - id: syntax
      type: EvilDICOM.Core.Enums.TransferSyntax
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
    content.vb: Public Shared Function ReadAllElements(dr As DICOMBinaryReader, syntax As TransferSyntax) As List(Of IDICOMElement)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadAllElementsImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadAllElementsImplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadAllElementsImplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadAllElementsImplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 169
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns all elements in implicit little endian format\n"
  example: []
  syntax:
    content: public static List<IDICOMElement> ReadAllElementsImplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
      description: DICOM elements read
    content.vb: Public Shared Function ReadAllElementsImplicitLittleEndian(dr As DICOMBinaryReader) As List(Of IDICOMElement)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadAllElementsExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadAllElementsExplicitBigEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadAllElementsExplicitBigEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadAllElementsExplicitBigEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 184
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns all elements in explicit big endian format\n"
  example: []
  syntax:
    content: public static List<IDICOMElement> ReadAllElementsExplicitBigEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
      description: DICOM elements read
    content.vb: Public Shared Function ReadAllElementsExplicitBigEndian(dr As DICOMBinaryReader) As List(Of IDICOMElement)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  commentId: M:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  id: ReadAllElementsExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  parent: EvilDICOM.Core.IO.Reading.DICOMElementReader
  langs:
  - csharp
  - vb
  name: ReadAllElementsExplicitLittleEndian(DICOMBinaryReader)
  nameWithType: DICOMElementReader.ReadAllElementsExplicitLittleEndian(DICOMBinaryReader)
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian(EvilDICOM.Core.IO.Reading.DICOMBinaryReader)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: ReadAllElementsExplicitLittleEndian
    path: ../EvilDICOM/EvilDICOM/Core/IO/Reading/DICOMElementReader.cs
    startLine: 199
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Reading
  summary: "\nReads and returns all elements in explilcit little endian format\n"
  example: []
  syntax:
    content: public static List<IDICOMElement> ReadAllElementsExplicitLittleEndian(DICOMBinaryReader dr)
    parameters:
    - id: dr
      type: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
      description: the binary reader which is reading the DICOM object
    return:
      type: List{EvilDICOM.Core.Interfaces.IDICOMElement}
      description: DICOM elements read
    content.vb: Public Shared Function ReadAllElementsExplicitLittleEndian(dr As DICOMBinaryReader) As List(Of IDICOMElement)
  overload: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Core.IO.Reading
  commentId: N:EvilDICOM.Core.IO.Reading
  isExternal: false
  name: EvilDICOM.Core.IO.Reading
  nameWithType: EvilDICOM.Core.IO.Reading
  fullName: EvilDICOM.Core.IO.Reading
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian
  isExternal: false
  name: ReadElementExplicitLittleEndian
  nameWithType: DICOMElementReader.ReadElementExplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitLittleEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  commentId: T:EvilDICOM.Core.IO.Reading.DICOMBinaryReader
  parent: EvilDICOM.Core.IO.Reading
  isExternal: false
  name: DICOMBinaryReader
  nameWithType: DICOMBinaryReader
  fullName: EvilDICOM.Core.IO.Reading.DICOMBinaryReader
- uid: EvilDICOM.Core.Interfaces.IDICOMElement
  commentId: T:EvilDICOM.Core.Interfaces.IDICOMElement
  parent: EvilDICOM.Core.Interfaces
  isExternal: false
  name: IDICOMElement
  nameWithType: IDICOMElement
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement
- uid: EvilDICOM.Core.Interfaces
  commentId: N:EvilDICOM.Core.Interfaces
  isExternal: false
  name: EvilDICOM.Core.Interfaces
  nameWithType: EvilDICOM.Core.Interfaces
  fullName: EvilDICOM.Core.Interfaces
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian
  isExternal: false
  name: ReadElementImplicitLittleEndian
  nameWithType: DICOMElementReader.ReadElementImplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementImplicitLittleEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian
  isExternal: false
  name: ReadElementExplicitBigEndian
  nameWithType: DICOMElementReader.ReadElementExplicitBigEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadElementExplicitBigEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian
  isExternal: false
  name: SkipElementExplicitLittleEndian
  nameWithType: DICOMElementReader.SkipElementExplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitLittleEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian
  isExternal: false
  name: SkipElementImplicitLittleEndian
  nameWithType: DICOMElementReader.SkipElementImplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementImplicitLittleEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian
  isExternal: false
  name: SkipElementExplicitBigEndian
  nameWithType: DICOMElementReader.SkipElementExplicitBigEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.SkipElementExplicitBigEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements
  isExternal: false
  name: ReadAllElements
  nameWithType: DICOMElementReader.ReadAllElements
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElements
- uid: EvilDICOM.Core.Enums.TransferSyntax
  commentId: T:EvilDICOM.Core.Enums.TransferSyntax
  parent: EvilDICOM.Core.Enums
  isExternal: false
  name: TransferSyntax
  nameWithType: TransferSyntax
  fullName: EvilDICOM.Core.Enums.TransferSyntax
- uid: List{EvilDICOM.Core.Interfaces.IDICOMElement}
  commentId: '!:List{EvilDICOM.Core.Interfaces.IDICOMElement}'
  definition: List`1
  name: List<IDICOMElement>
  nameWithType: List<IDICOMElement>
  fullName: List<EvilDICOM.Core.Interfaces.IDICOMElement>
  nameWithType.vb: List(Of IDICOMElement)
  fullName.vb: List(Of EvilDICOM.Core.Interfaces.IDICOMElement)
  name.vb: List(Of IDICOMElement)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Enums
  commentId: N:EvilDICOM.Core.Enums
  isExternal: false
  name: EvilDICOM.Core.Enums
  nameWithType: EvilDICOM.Core.Enums
  fullName: EvilDICOM.Core.Enums
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian
  isExternal: false
  name: ReadAllElementsImplicitLittleEndian
  nameWithType: DICOMElementReader.ReadAllElementsImplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsImplicitLittleEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian
  isExternal: false
  name: ReadAllElementsExplicitBigEndian
  nameWithType: DICOMElementReader.ReadAllElementsExplicitBigEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitBigEndian
- uid: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian*
  commentId: Overload:EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian
  isExternal: false
  name: ReadAllElementsExplicitLittleEndian
  nameWithType: DICOMElementReader.ReadAllElementsExplicitLittleEndian
  fullName: EvilDICOM.Core.IO.Reading.DICOMElementReader.ReadAllElementsExplicitLittleEndian
