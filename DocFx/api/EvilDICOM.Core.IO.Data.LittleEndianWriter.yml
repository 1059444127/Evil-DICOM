### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter
  commentId: T:EvilDICOM.Core.IO.Data.LittleEndianWriter
  id: LittleEndianWriter
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision(EvilDICOM.Core.DICOMData{System.Double})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle(System.Double)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong(EvilDICOM.Core.DICOMData{System.Int32})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle(System.Int32)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort(EvilDICOM.Core.DICOMData{System.Int16})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle(System.Int16)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision(EvilDICOM.Core.DICOMData{System.Single})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle(System.Single)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag(EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle(EvilDICOM.Core.Element.Tag)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong(EvilDICOM.Core.DICOMData{System.UInt32})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle(System.UInt32)
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort(EvilDICOM.Core.DICOMData{System.UInt16})
  - EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle(System.UInt16)
  langs:
  - csharp
  - vb
  name: LittleEndianWriter
  nameWithType: LittleEndianWriter
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: LittleEndianWriter
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 6
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: 'public class LittleEndianWriter : object'
    content.vb: >-
      Public Class LittleEndianWriter
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag(EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag(EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag})
  id: WriteTag(EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteTag(DICOMData<Tag>)
  nameWithType: LittleEndianWriter.WriteTag(DICOMData<Tag>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag(EvilDICOM.Core.DICOMData<EvilDICOM.Core.Element.Tag>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteTag
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteTag(DICOMData<Tag> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteTag(data As DICOMData(Of Tag)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag*
  nameWithType.vb: LittleEndianWriter.WriteTag(DICOMData(Of Tag))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag(EvilDICOM.Core.DICOMData(Of EvilDICOM.Core.Element.Tag))
  name.vb: WriteTag(DICOMData(Of Tag))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision(EvilDICOM.Core.DICOMData{System.Single})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision(EvilDICOM.Core.DICOMData{System.Single})
  id: WriteSinglePrecision(EvilDICOM.Core.DICOMData{System.Single})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSinglePrecision(DICOMData<Single>)
  nameWithType: LittleEndianWriter.WriteSinglePrecision(DICOMData<Single>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision(EvilDICOM.Core.DICOMData<System.Single>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSinglePrecision
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSinglePrecision(DICOMData<float> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.Single}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSinglePrecision(data As DICOMData(Of Single)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision*
  nameWithType.vb: LittleEndianWriter.WriteSinglePrecision(DICOMData(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision(EvilDICOM.Core.DICOMData(Of System.Single))
  name.vb: WriteSinglePrecision(DICOMData(Of Single))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision(EvilDICOM.Core.DICOMData{System.Double})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision(EvilDICOM.Core.DICOMData{System.Double})
  id: WriteDoublePrecision(EvilDICOM.Core.DICOMData{System.Double})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteDoublePrecision(DICOMData<Double>)
  nameWithType: LittleEndianWriter.WriteDoublePrecision(DICOMData<Double>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision(EvilDICOM.Core.DICOMData<System.Double>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteDoublePrecision
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteDoublePrecision(DICOMData<double> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.Double}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteDoublePrecision(data As DICOMData(Of Double)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision*
  nameWithType.vb: LittleEndianWriter.WriteDoublePrecision(DICOMData(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision(EvilDICOM.Core.DICOMData(Of System.Double))
  name.vb: WriteDoublePrecision(DICOMData(Of Double))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong(EvilDICOM.Core.DICOMData{System.Int32})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong(EvilDICOM.Core.DICOMData{System.Int32})
  id: WriteSignedLong(EvilDICOM.Core.DICOMData{System.Int32})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSignedLong(DICOMData<Int32>)
  nameWithType: LittleEndianWriter.WriteSignedLong(DICOMData<Int32>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong(EvilDICOM.Core.DICOMData<System.Int32>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSignedLong
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSignedLong(DICOMData<int> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.Int32}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSignedLong(data As DICOMData(Of Integer)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong*
  nameWithType.vb: LittleEndianWriter.WriteSignedLong(DICOMData(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong(EvilDICOM.Core.DICOMData(Of System.Int32))
  name.vb: WriteSignedLong(DICOMData(Of Int32))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong(EvilDICOM.Core.DICOMData{System.UInt32})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong(EvilDICOM.Core.DICOMData{System.UInt32})
  id: WriteUnsignedLong(EvilDICOM.Core.DICOMData{System.UInt32})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteUnsignedLong(DICOMData<UInt32>)
  nameWithType: LittleEndianWriter.WriteUnsignedLong(DICOMData<UInt32>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong(EvilDICOM.Core.DICOMData<System.UInt32>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteUnsignedLong
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 29
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteUnsignedLong(DICOMData<uint> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.UInt32}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteUnsignedLong(data As DICOMData(Of UInteger)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong*
  nameWithType.vb: LittleEndianWriter.WriteUnsignedLong(DICOMData(Of UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong(EvilDICOM.Core.DICOMData(Of System.UInt32))
  name.vb: WriteUnsignedLong(DICOMData(Of UInt32))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort(EvilDICOM.Core.DICOMData{System.Int16})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort(EvilDICOM.Core.DICOMData{System.Int16})
  id: WriteSignedShort(EvilDICOM.Core.DICOMData{System.Int16})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSignedShort(DICOMData<Int16>)
  nameWithType: LittleEndianWriter.WriteSignedShort(DICOMData<Int16>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort(EvilDICOM.Core.DICOMData<System.Int16>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSignedShort
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 34
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSignedShort(DICOMData<short> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.Int16}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSignedShort(data As DICOMData(Of Short)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort*
  nameWithType.vb: LittleEndianWriter.WriteSignedShort(DICOMData(Of Int16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort(EvilDICOM.Core.DICOMData(Of System.Int16))
  name.vb: WriteSignedShort(DICOMData(Of Int16))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort(EvilDICOM.Core.DICOMData{System.UInt16})
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort(EvilDICOM.Core.DICOMData{System.UInt16})
  id: WriteUnsignedShort(EvilDICOM.Core.DICOMData{System.UInt16})
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteUnsignedShort(DICOMData<UInt16>)
  nameWithType: LittleEndianWriter.WriteUnsignedShort(DICOMData<UInt16>)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort(EvilDICOM.Core.DICOMData<System.UInt16>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteUnsignedShort
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 39
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteUnsignedShort(DICOMData<ushort> data)
    parameters:
    - id: data
      type: EvilDICOM.Core.DICOMData{System.UInt16}
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteUnsignedShort(data As DICOMData(Of UShort)) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort*
  nameWithType.vb: LittleEndianWriter.WriteUnsignedShort(DICOMData(Of UInt16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort(EvilDICOM.Core.DICOMData(Of System.UInt16))
  name.vb: WriteUnsignedShort(DICOMData(Of UInt16))
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle(EvilDICOM.Core.Element.Tag)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle(EvilDICOM.Core.Element.Tag)
  id: WriteTagSingle(EvilDICOM.Core.Element.Tag)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteTagSingle(Tag)
  nameWithType: LittleEndianWriter.WriteTagSingle(Tag)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle(EvilDICOM.Core.Element.Tag)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteTagSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 46
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteTagSingle(Tag tag)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteTagSingle(tag As Tag) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle(System.Single)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle(System.Single)
  id: WriteSinglePrecisionSingle(System.Single)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSinglePrecisionSingle(Single)
  nameWithType: LittleEndianWriter.WriteSinglePrecisionSingle(Single)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle(System.Single)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSinglePrecisionSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 51
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSinglePrecisionSingle(float data)
    parameters:
    - id: data
      type: System.Single
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSinglePrecisionSingle(data As Single) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle(System.Double)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle(System.Double)
  id: WriteDoublePrecisionSingle(System.Double)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteDoublePrecisionSingle(Double)
  nameWithType: LittleEndianWriter.WriteDoublePrecisionSingle(Double)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle(System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteDoublePrecisionSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 56
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteDoublePrecisionSingle(double data)
    parameters:
    - id: data
      type: System.Double
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteDoublePrecisionSingle(data As Double) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle(System.Int32)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle(System.Int32)
  id: WriteSignedLongSingle(System.Int32)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSignedLongSingle(Int32)
  nameWithType: LittleEndianWriter.WriteSignedLongSingle(Int32)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle(System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSignedLongSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 61
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSignedLongSingle(int data)
    parameters:
    - id: data
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSignedLongSingle(data As Integer) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle(System.UInt32)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle(System.UInt32)
  id: WriteUnsignedLongSingle(System.UInt32)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteUnsignedLongSingle(UInt32)
  nameWithType: LittleEndianWriter.WriteUnsignedLongSingle(UInt32)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle(System.UInt32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteUnsignedLongSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 66
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteUnsignedLongSingle(uint data)
    parameters:
    - id: data
      type: System.UInt32
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteUnsignedLongSingle(data As UInteger) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle(System.Int16)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle(System.Int16)
  id: WriteSignedShortSingle(System.Int16)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteSignedShortSingle(Int16)
  nameWithType: LittleEndianWriter.WriteSignedShortSingle(Int16)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle(System.Int16)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteSignedShortSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 71
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteSignedShortSingle(short data)
    parameters:
    - id: data
      type: System.Int16
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteSignedShortSingle(data As Short) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle(System.UInt16)
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle(System.UInt16)
  id: WriteUnsignedShortSingle(System.UInt16)
  parent: EvilDICOM.Core.IO.Data.LittleEndianWriter
  langs:
  - csharp
  - vb
  name: WriteUnsignedShortSingle(UInt16)
  nameWithType: LittleEndianWriter.WriteUnsignedShortSingle(UInt16)
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle(System.UInt16)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    id: WriteUnsignedShortSingle
    path: ../EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianWriter.cs
    startLine: 76
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] WriteUnsignedShortSingle(ushort data)
    parameters:
    - id: data
      type: System.UInt16
    return:
      type: System.Byte[]
    content.vb: Public Shared Function WriteUnsignedShortSingle(data As UShort) As Byte()
  overload: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Core.IO.Data
  commentId: N:EvilDICOM.Core.IO.Data
  isExternal: false
  name: EvilDICOM.Core.IO.Data
  nameWithType: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag
  isExternal: false
  name: WriteTag
  nameWithType: LittleEndianWriter.WriteTag
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTag
- uid: EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag}
  commentId: T:EvilDICOM.Core.DICOMData{EvilDICOM.Core.Element.Tag}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<Tag>
  nameWithType: DICOMData<Tag>
  fullName: EvilDICOM.Core.DICOMData<EvilDICOM.Core.Element.Tag>
  nameWithType.vb: DICOMData(Of Tag)
  fullName.vb: EvilDICOM.Core.DICOMData(Of EvilDICOM.Core.Element.Tag)
  name.vb: DICOMData(Of Tag)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.DICOMData`1
  commentId: T:EvilDICOM.Core.DICOMData`1
  parent: EvilDICOM.Core
  isExternal: false
  name: DICOMData<T>
  nameWithType: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  nameWithType.vb: DICOMData(Of T)
  fullName.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core
  commentId: N:EvilDICOM.Core
  isExternal: false
  name: EvilDICOM.Core
  nameWithType: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision
  isExternal: false
  name: WriteSinglePrecision
  nameWithType: LittleEndianWriter.WriteSinglePrecision
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecision
- uid: EvilDICOM.Core.DICOMData{System.Single}
  commentId: T:EvilDICOM.Core.DICOMData{System.Single}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<Single>
  nameWithType: DICOMData<Single>
  fullName: EvilDICOM.Core.DICOMData<System.Single>
  nameWithType.vb: DICOMData(Of Single)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.Single)
  name.vb: DICOMData(Of Single)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision
  isExternal: false
  name: WriteDoublePrecision
  nameWithType: LittleEndianWriter.WriteDoublePrecision
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecision
- uid: EvilDICOM.Core.DICOMData{System.Double}
  commentId: T:EvilDICOM.Core.DICOMData{System.Double}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<Double>
  nameWithType: DICOMData<Double>
  fullName: EvilDICOM.Core.DICOMData<System.Double>
  nameWithType.vb: DICOMData(Of Double)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.Double)
  name.vb: DICOMData(Of Double)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong
  isExternal: false
  name: WriteSignedLong
  nameWithType: LittleEndianWriter.WriteSignedLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLong
- uid: EvilDICOM.Core.DICOMData{System.Int32}
  commentId: T:EvilDICOM.Core.DICOMData{System.Int32}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<Int32>
  nameWithType: DICOMData<Int32>
  fullName: EvilDICOM.Core.DICOMData<System.Int32>
  nameWithType.vb: DICOMData(Of Int32)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.Int32)
  name.vb: DICOMData(Of Int32)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong
  isExternal: false
  name: WriteUnsignedLong
  nameWithType: LittleEndianWriter.WriteUnsignedLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLong
- uid: EvilDICOM.Core.DICOMData{System.UInt32}
  commentId: T:EvilDICOM.Core.DICOMData{System.UInt32}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<UInt32>
  nameWithType: DICOMData<UInt32>
  fullName: EvilDICOM.Core.DICOMData<System.UInt32>
  nameWithType.vb: DICOMData(Of UInt32)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.UInt32)
  name.vb: DICOMData(Of UInt32)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort
  isExternal: false
  name: WriteSignedShort
  nameWithType: LittleEndianWriter.WriteSignedShort
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShort
- uid: EvilDICOM.Core.DICOMData{System.Int16}
  commentId: T:EvilDICOM.Core.DICOMData{System.Int16}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<Int16>
  nameWithType: DICOMData<Int16>
  fullName: EvilDICOM.Core.DICOMData<System.Int16>
  nameWithType.vb: DICOMData(Of Int16)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.Int16)
  name.vb: DICOMData(Of Int16)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort
  isExternal: false
  name: WriteUnsignedShort
  nameWithType: LittleEndianWriter.WriteUnsignedShort
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShort
- uid: EvilDICOM.Core.DICOMData{System.UInt16}
  commentId: T:EvilDICOM.Core.DICOMData{System.UInt16}
  parent: EvilDICOM.Core
  definition: EvilDICOM.Core.DICOMData`1
  name: DICOMData<UInt16>
  nameWithType: DICOMData<UInt16>
  fullName: EvilDICOM.Core.DICOMData<System.UInt16>
  nameWithType.vb: DICOMData(Of UInt16)
  fullName.vb: EvilDICOM.Core.DICOMData(Of System.UInt16)
  name.vb: DICOMData(Of UInt16)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle
  isExternal: false
  name: WriteTagSingle
  nameWithType: LittleEndianWriter.WriteTagSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteTagSingle
- uid: EvilDICOM.Core.Element.Tag
  commentId: T:EvilDICOM.Core.Element.Tag
  parent: EvilDICOM.Core.Element
  isExternal: false
  name: Tag
  nameWithType: Tag
  fullName: EvilDICOM.Core.Element.Tag
- uid: EvilDICOM.Core.Element
  commentId: N:EvilDICOM.Core.Element
  isExternal: false
  name: EvilDICOM.Core.Element
  nameWithType: EvilDICOM.Core.Element
  fullName: EvilDICOM.Core.Element
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle
  isExternal: false
  name: WriteSinglePrecisionSingle
  nameWithType: LittleEndianWriter.WriteSinglePrecisionSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSinglePrecisionSingle
- uid: System.Single
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle
  isExternal: false
  name: WriteDoublePrecisionSingle
  nameWithType: LittleEndianWriter.WriteDoublePrecisionSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteDoublePrecisionSingle
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle
  isExternal: false
  name: WriteSignedLongSingle
  nameWithType: LittleEndianWriter.WriteSignedLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedLongSingle
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle
  isExternal: false
  name: WriteUnsignedLongSingle
  nameWithType: LittleEndianWriter.WriteUnsignedLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedLongSingle
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle
  isExternal: false
  name: WriteSignedShortSingle
  nameWithType: LittleEndianWriter.WriteSignedShortSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteSignedShortSingle
- uid: System.Int16
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle
  isExternal: false
  name: WriteUnsignedShortSingle
  nameWithType: LittleEndianWriter.WriteUnsignedShortSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianWriter.WriteUnsignedShortSingle
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
