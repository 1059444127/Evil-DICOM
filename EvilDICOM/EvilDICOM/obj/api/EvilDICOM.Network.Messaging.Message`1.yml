items:
- uid: EvilDICOM.Network.Messaging.Message`1
  id: Message`1
  parent: EvilDICOM.Network.Messaging
  children:
  - EvilDICOM.Network.Messaging.Message`1.DynPayload
  - EvilDICOM.Network.Messaging.Message`1.Payload
  - EvilDICOM.Network.Messaging.Message`1.Type
  langs:
  - csharp
  - vb
  name: Message<T>
  name.vb: Message(Of T)
  fullName: EvilDICOM.Network.Messaging.Message<T>
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T)
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: 'public class Message<T> : IMessage'
    content.vb: Public Class Message(Of T) Implements IMessage
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - EvilDICOM.Network.Interfaces.IMessage
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: EvilDICOM.Network.Messaging.Message`1.Payload
  id: Payload
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: Payload
  fullName: EvilDICOM.Network.Messaging.Message<T>.Payload
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Payload
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 7
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public T Payload { get; set; }
    content.vb: Public Property Payload As T
    parameters: []
    return:
      type: '{T}'
- uid: EvilDICOM.Network.Messaging.Message`1.Type
  id: Type
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: Type
  fullName: EvilDICOM.Network.Messaging.Message<T>.Type
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).Type
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public MessageType Type { get; set; }
    content.vb: Public Property Type As MessageType
    parameters: []
    return:
      type: EvilDICOM.Network.Enums.MessageType
- uid: EvilDICOM.Network.Messaging.Message`1.DynPayload
  id: DynPayload
  parent: EvilDICOM.Network.Messaging.Message`1
  langs:
  - csharp
  - vb
  name: DynPayload
  fullName: EvilDICOM.Network.Messaging.Message<T>.DynPayload
  fullName.vb: EvilDICOM.Network.Messaging.Message(Of T).DynPayload
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM.git
    path: EvilDICOM/EvilDICOM/Network/Messaging/Message.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public dynamic DynPayload { get; }
    content.vb: Public ReadOnly Property DynPayload As Object
    parameters: []
    return:
      type: System.Object
references:
- uid: EvilDICOM.Network.Messaging
  isExternal: false
  name: EvilDICOM.Network.Messaging
  fullName: EvilDICOM.Network.Messaging
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: EvilDICOM.Network.Interfaces.IMessage
  parent: EvilDICOM.Network.Interfaces
  isExternal: false
  name: IMessage
  fullName: EvilDICOM.Network.Interfaces.IMessage
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: EvilDICOM.Network.Interfaces
  isExternal: false
  name: EvilDICOM.Network.Interfaces
  fullName: EvilDICOM.Network.Interfaces
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: EvilDICOM.Network.Enums.MessageType
  parent: EvilDICOM.Network.Enums
  isExternal: false
  name: MessageType
  fullName: EvilDICOM.Network.Enums.MessageType
- uid: EvilDICOM.Network.Enums
  isExternal: false
  name: EvilDICOM.Network.Enums
  fullName: EvilDICOM.Network.Enums
